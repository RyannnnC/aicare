{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Github\\\\aicare\\\\Scene\\\\MedicalRecord\\\\ePrescription.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { styles } from \"../providerStyle\";\nimport DataContext from \"../../providerContext\";\nimport I18n from \"../switchLanguage\";\n\nvar Eprescription = function (_Component) {\n  _inherits(Eprescription, _Component);\n\n  var _super = _createSuper(Eprescription);\n\n  function Eprescription(props) {\n    var _this;\n\n    _classCallCheck(this, Eprescription);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: false,\n      customerUserInfoId: null\n    };\n    return _this;\n  }\n\n  _createClass(Eprescription, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this.props.route.params.customerUserInfoId != null) {\n                this.setState({\n                  customerUserInfoId: this.props.route.params.customerUserInfoId\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"queryPrescription\",\n    value: function queryPrescription() {\n      var _this2 = this;\n\n      this.setState({\n        isLoading: true\n      });\n      var url = 'http://' + this.context.url + '/aicare-business-api/business/medical-report/query-medical-info-by-appointment' + '?customerAppointmentId=' + this.props.route.params.appointmentId;\n      fetch(url, {\n        method: 'GET',\n        mode: 'cors',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'sso-auth-token': this.context.token,\n          'sso-refresh-token': this.context.refresh_token,\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Credentials': true,\n          'Access-Control-Allow-Headers': 'content-type, sso-auth-token',\n          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        _this2.setState({\n          isLoading: false\n        });\n\n        if (json.code === 0) {\n          _this2.setState({\n            name: json.medicalInfo.firstName + json.medicalInfo.lastName,\n            gender: json.medicalInfo.gender,\n            dob: json.medicalInfo.dob,\n            mobile: json.medicalInfo.mobile,\n            language: json.medicalInfo.languages,\n            userId: json.medicalInfo.customerUserId,\n            email: json.medicalInfo.email,\n            address: json.medicalInfo.address,\n            infoId: json.medicalInfo.customerUserInfoId,\n            allergy: json.medicalInfo.allergen,\n            medicineUsage: json.medicalInfo.medicineUsage,\n            familyHistory: json.medicalInfo.familyHistory,\n            chronic: json.medicalInfo.chronic,\n            historyMedicalRecords: json.medicalInfo.historyMedicalRecords\n          });\n\n          if (json.medicalInfo.medicareCard != null) {\n            _this2.setState({\n              category: json.medicalInfo.medicareCard[0].category,\n              cardNumber: json.medicalInfo.medicareCard[0].number,\n              cardHolder: json.medicalInfo.medicareCard[0].firstName + json.medicalInfo.medicareCard[0].lastName\n            });\n          }\n        } else if (json.code == 10011) {\n          _this2.loggedin(json.msg);\n        } else {\n          alert(json.msg);\n        }\n      }).catch(function (error) {\n        return console.warn(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isLoading) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: 'rgb(51,51,51)'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 6\n          }\n        }, React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"white\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 10\n          }\n        }));\n      } else {\n        return React.createElement(SafeAreaView, {\n          style: {\n            flex: 1,\n            height: '100%',\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: 'rgb(51,51,51)'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 5\n          }\n        }, React.createElement(ScrollView, {\n          style: {\n            flex: 1,\n            width: '90%',\n            height: '100%',\n            backgroundColor: 'white'\n          },\n          contentContainerStyle: {\n            alignItems: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 9\n          }\n        }, \"This is ep page\"), React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 9\n          }\n        }, this.state.customerUserInfoId != null && this.state.customerUserInfoId)));\n      }\n    }\n  }]);\n\n  return Eprescription;\n}(Component);\n\nexport { Eprescription as default };\nEprescription.contextType = DataContext;","map":{"version":3,"sources":["F:/Github/aicare/Scene/MedicalRecord/ePrescription.js"],"names":["React","Component","styles","DataContext","I18n","Eprescription","props","state","isLoading","customerUserInfoId","route","params","setState","url","context","appointmentId","fetch","method","mode","credentials","headers","token","refresh_token","then","response","json","code","name","medicalInfo","firstName","lastName","gender","dob","mobile","language","languages","userId","customerUserId","email","address","infoId","allergy","allergen","medicineUsage","familyHistory","chronic","historyMedicalRecords","medicareCard","category","cardNumber","number","cardHolder","loggedin","msg","alert","catch","error","console","warn","flex","justifyContent","alignItems","backgroundColor","height","width","contextType"],"mappings":"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","sourcesContent":["import React ,{Component}from 'react';\r\nimport { ScrollView,Text, View,  Image,TouchableOpacity,SafeAreaView,TextInput } from 'react-native';\r\nimport {styles} from '../providerStyle';\r\nimport DataContext from '../../providerContext';\r\nimport I18n from '../switchLanguage';\r\n\r\nexport default class Eprescription extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    isLoading:false,\r\n    customerUserInfoId:null,\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    if(this.props.route.params.customerUserInfoId != null) {\r\n      this.setState({customerUserInfoId:this.props.route.params.customerUserInfoId});\r\n    }\r\n  }\r\n\r\n  queryPrescription() {\r\n    this.setState({isLoading:true})\r\n    let url = 'http://'\r\n    +this.context.url\r\n    +'/aicare-business-api/business/medical-report/query-medical-info-by-appointment'\r\n    +'?customerAppointmentId='+ this.props.route.params.appointmentId;\r\n    fetch(url,{\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      credentials: 'include',\r\n      headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'sso-auth-token': this.context.token,\r\n      'sso-refresh-token': this.context.refresh_token,\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Credentials': true,\r\n      'Access-Control-Allow-Headers': 'content-type, sso-auth-token',\r\n      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE',\r\n    }})\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      this.setState({isLoading:false})\r\n      if (json.code === 0) {\r\n        this.setState({\r\n          name:json.medicalInfo.firstName + json.medicalInfo.lastName,\r\n          gender:json.medicalInfo.gender,\r\n          dob:json.medicalInfo.dob,\r\n          mobile:json.medicalInfo.mobile,\r\n          language:json.medicalInfo.languages,\r\n          userId:json.medicalInfo.customerUserId,\r\n          email:json.medicalInfo.email,\r\n          address:json.medicalInfo.address,\r\n          infoId:json.medicalInfo.customerUserInfoId,\r\n          allergy:json.medicalInfo.allergen,\r\n          medicineUsage:json.medicalInfo.medicineUsage,\r\n          familyHistory:json.medicalInfo.familyHistory,\r\n          chronic:json.medicalInfo.chronic,\r\n          historyMedicalRecords:json.medicalInfo.historyMedicalRecords,\r\n        })\r\n        if(json.medicalInfo.medicareCard!=null){\r\n          this.setState({\r\n            category:json.medicalInfo.medicareCard[0].category,\r\n            cardNumber:json.medicalInfo.medicareCard[0].number,\r\n            cardHolder:json.medicalInfo.medicareCard[0].firstName + json.medicalInfo.medicareCard[0].lastName,\r\n          })\r\n        }\r\n      } else if (json.code == 10011) {\r\n        this.loggedin(json.msg)\r\n      } else {\r\n        alert(json.msg)\r\n      }\r\n    })\r\n    .catch(error => console.warn(error));\r\n  }\r\n  render() {\r\n    if (this.state.isLoading){\r\n      return(\r\n     <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\", backgroundColor:'rgb(51,51,51)' }}>\r\n         <ActivityIndicator size=\"large\" color=\"white\"  />\r\n      </View>\r\n    )}else {\r\n    return (\r\n    <SafeAreaView style={{ flex:1,height:'100%', justifyContent: \"center\", alignItems: \"center\" , backgroundColor:'rgb(51,51,51)'}}>\r\n      <ScrollView style={{ flex:1, width:'90%',height:'100%',backgroundColor:'white'}}\r\n      contentContainerStyle={{alignItems:'center'}}>\r\n        <Text>This is ep page</Text>\r\n        <Text>{this.state.customerUserInfoId !=null && this.state.customerUserInfoId }</Text>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  )}}\r\n}\r\nEprescription.contextType = DataContext;\r\n"]},"metadata":{},"sourceType":"module"}