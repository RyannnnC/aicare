{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Github\\\\aicare\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\Scroller.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PropTypes from 'prop-types';\nimport { RecyclerListView, DataProvider, LayoutProvider } from 'recyclerlistview';\nimport moment from 'moment';\n\nvar CalendarScroller = function (_Component) {\n  _inherits(CalendarScroller, _Component);\n\n  var _super = _createSuper(CalendarScroller);\n\n  function CalendarScroller(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarScroller);\n\n    _this = _super.call(this, props);\n\n    _this.goToDate = function (date, delay) {\n      var data = _this.state.data;\n\n      var _loop = function _loop(i) {\n        if (data[i].isSame(date, 'month')) {\n          if (delay) {\n            setTimeout(function () {\n              return _this.rlv && _this.rlv.scrollToIndex(i, false);\n            }, delay);\n          } else {\n            _this.rlv && _this.rlv.scrollToIndex(i, false);\n          }\n\n          return \"break\";\n        }\n      };\n\n      for (var i = 0; i < data.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"break\") break;\n      }\n    };\n\n    _this.scrollLeft = function () {\n      var _this$state = _this.state,\n          currentIndex = _this$state.currentIndex,\n          numVisibleItems = _this$state.numVisibleItems;\n\n      if (currentIndex === 0) {\n        return;\n      }\n\n      var newIndex = Math.max(currentIndex - numVisibleItems, 0);\n      _this.rlv && _this.rlv.scrollToIndex(newIndex, true);\n    };\n\n    _this.scrollRight = function () {\n      var _this$state2 = _this.state,\n          currentIndex = _this$state2.currentIndex,\n          numVisibleItems = _this$state2.numVisibleItems,\n          numMonths = _this$state2.numMonths;\n      var newIndex = Math.min(currentIndex + numVisibleItems, numMonths - 1);\n      _this.rlv && _this.rlv.scrollToIndex(newIndex, true);\n    };\n\n    _this.shiftMonthsForward = function (currentMonth) {\n      _this.shiftMonths(currentMonth, _this.state.numMonths / 3);\n    };\n\n    _this.shiftMonthsBackward = function (currentMonth) {\n      _this.shiftMonths(currentMonth, _this.state.numMonths * 2 / 3);\n    };\n\n    _this.shiftMonths = function (currentMonth, offset) {\n      var prevVisMonth = currentMonth.clone();\n      var newStartMonth = prevVisMonth.clone().subtract(Math.floor(offset), 'months');\n\n      _this.updateMonths(prevVisMonth, newStartMonth);\n    };\n\n    _this.updateMonths = function (prevVisMonth, newStartMonth) {\n      if (_this.shifting) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          minDate = _this$props.minDate,\n          maxDate = _this$props.maxDate,\n          restrictMonthNavigation = _this$props.restrictMonthNavigation;\n      var data = [];\n      var _newStartMonth = newStartMonth;\n\n      if (minDate && restrictMonthNavigation && newStartMonth.isBefore(minDate, 'month')) {\n        _newStartMonth = moment(minDate);\n      }\n\n      for (var i = 0; i < _this.state.numMonths; i++) {\n        var date = _newStartMonth.clone().add(i, 'months');\n\n        if (maxDate && restrictMonthNavigation && date.isAfter(maxDate, 'month')) {\n          break;\n        }\n\n        data.push(date);\n      }\n\n      if (data.length < _this.props.maxSimultaneousMonths) {\n        return;\n      }\n\n      var _loop2 = function _loop2(_i) {\n        if (data[_i].isSame(prevVisMonth, 'month')) {\n          _this.shifting = true;\n          _this.rlv && _this.rlv.scrollToIndex(_i, false);\n          setTimeout(function () {\n            _this.rlv && _this.rlv.scrollToIndex(_i, false);\n            _this.shifting = false;\n          }, 800);\n          return \"break\";\n        }\n      };\n\n      for (var _i = 0; _i < data.length; _i++) {\n        var _ret2 = _loop2(_i);\n\n        if (_ret2 === \"break\") break;\n      }\n\n      _this.setState({\n        data: data,\n        dataProvider: _this.dataProvider.cloneWithRows(data)\n      });\n    };\n\n    _this.onVisibleIndicesChanged = function (all, now) {\n      var _this$state3 = _this.state,\n          data = _this$state3.data,\n          numMonths = _this$state3.numMonths,\n          _currentMonth = _this$state3.currentMonth;\n      var _this$props2 = _this.props,\n          updateMonthYear = _this$props2.updateMonthYear,\n          onMonthChange = _this$props2.onMonthChange;\n      var currentIndex = now[0] || all[0];\n      var currentMonth = data[currentIndex];\n\n      if (!_currentMonth || !_currentMonth.isSame(currentMonth, 'month')) {\n        var currMonth = currentMonth && currentMonth.clone();\n        onMonthChange && onMonthChange(currMonth);\n      }\n\n      updateMonthYear && updateMonthYear(currentMonth, true);\n\n      if (currentIndex === 0) {\n        _this.shiftMonthsBackward(currentMonth);\n      } else if (currentIndex > numMonths - 3) {\n        _this.shiftMonthsForward(currentMonth);\n      }\n\n      _this.setState({\n        currentMonth: currentMonth,\n        currentIndex: currentIndex\n      });\n    };\n\n    _this.onLayout = function (event) {\n      var containerWidth = event.nativeEvent.layout.width;\n\n      _this.setState(_objectSpread({\n        numVisibleItems: Math.floor(containerWidth / _this.state.itemWidth)\n      }, _this.updateLayout(_this.props.renderMonthParams.styles)));\n    };\n\n    _this.rowRenderer = function (type, rowMonth, i, extState) {\n      var _this$props3 = _this.props,\n          updateMonthYear = _this$props3.updateMonthYear,\n          renderMonth = _this$props3.renderMonth;\n\n      var _updateMonthYear = updateMonthYear(rowMonth),\n          month = _updateMonthYear.currentMonth,\n          year = _updateMonthYear.currentYear;\n\n      return renderMonth && renderMonth(_objectSpread(_objectSpread({}, extState), {}, {\n        month: month,\n        year: year\n      }));\n    };\n\n    _this.updateLayout = function (dims) {\n      var itemWidth = dims.containerWidth;\n      var itemHeight = dims.containerHeight;\n\n      if (dims.dayWrapper && dims.dayWrapper.height) {\n        itemHeight = dims.dayWrapper.height * 6;\n      }\n\n      var layoutProvider = new LayoutProvider(function () {\n        return 0;\n      }, function (type, dim) {\n        dim.width = itemWidth;\n        dim.height = itemHeight;\n      });\n      return {\n        layoutProvider: layoutProvider,\n        itemHeight: itemHeight,\n        itemWidth: itemWidth\n      };\n    };\n\n    _this.dataProvider = new DataProvider(function (r1, r2) {\n      return r1 !== r2;\n    });\n\n    _this.updateMonthsData = function (data) {\n      return {\n        data: data,\n        numMonths: data.length,\n        dataProvider: _this.dataProvider.cloneWithRows(data)\n      };\n    };\n\n    _this.state = _objectSpread(_objectSpread(_objectSpread({}, _this.updateLayout(props.renderMonthParams.styles)), _this.updateMonthsData(props.data)), {}, {\n      numVisibleItems: 1\n    });\n    return _this;\n  }\n\n  _createClass(CalendarScroller, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(prevProps, prevState) {\n      return this.state.data !== prevState.data || this.state.itemHeight !== prevState.itemHeight || this.state.itemWidth !== prevState.itemWidth || this.props.renderMonthParams !== prevProps.renderMonthParams;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var newState = {};\n      var updateState = false;\n\n      if (this.props.renderMonthParams.styles !== prevProps.renderMonthParams.styles) {\n        updateState = true;\n        newState = this.updateLayout(this.props.renderMonthParams);\n      }\n\n      if (this.props.data !== prevProps.data) {\n        updateState = true;\n        newState = _objectSpread(_objectSpread({}, newState), this.updateMonthsData(this.props.data));\n      }\n\n      if (Platform.OS === 'android' && this.props.renderMonthParams.selectedStartDate !== prevProps.renderMonthParams.selectedStartDate) {\n        this.goToDate(this.props.renderMonthParams.selectedStartDate, 100);\n      }\n\n      if (updateState) {\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state4 = this.state,\n          data = _this$state4.data,\n          numMonths = _this$state4.numMonths,\n          height = _this$state4.itemHeight,\n          width = _this$state4.itemWidth,\n          layoutProvider = _this$state4.layoutProvider,\n          dataProvider = _this$state4.dataProvider;\n\n      if (!data || numMonths === 0 || !height) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        style: {\n          width: width,\n          height: height\n        },\n        onLayout: this.onLayout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 7\n        }\n      }, React.createElement(RecyclerListView, {\n        ref: function ref(rlv) {\n          return _this2.rlv = rlv;\n        },\n        layoutProvider: layoutProvider,\n        dataProvider: dataProvider,\n        rowRenderer: this.rowRenderer,\n        extendedState: this.props.renderMonthParams,\n        initialRenderIndex: this.props.initialRenderIndex,\n        onVisibleIndicesChanged: this.onVisibleIndicesChanged,\n        isHorizontal: this.props.horizontal,\n        scrollViewProps: {\n          showsHorizontalScrollIndicator: false,\n          snapToInterval: this.props.horizontal ? width : height\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return CalendarScroller;\n}(Component);\n\nCalendarScroller.propTypes = {\n  data: PropTypes.array.isRequired,\n  initialRenderIndex: PropTypes.number,\n  renderMonth: PropTypes.func,\n  renderMonthParams: PropTypes.object.isRequired,\n  minDate: PropTypes.any,\n  maxDate: PropTypes.any,\n  maxSimultaneousMonths: PropTypes.number,\n  horizontal: PropTypes.bool,\n  updateMonthYear: PropTypes.func,\n  onMonthChange: PropTypes.func\n};\nCalendarScroller.defaultProps = {\n  data: [],\n  renderMonthParams: {\n    styles: {}\n  }\n};\nexport { CalendarScroller as default };","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-calendar-picker/CalendarPicker/Scroller.js"],"names":["React","Component","PropTypes","RecyclerListView","DataProvider","LayoutProvider","moment","CalendarScroller","props","goToDate","date","delay","data","state","i","isSame","setTimeout","rlv","scrollToIndex","length","scrollLeft","currentIndex","numVisibleItems","newIndex","Math","max","scrollRight","numMonths","min","shiftMonthsForward","currentMonth","shiftMonths","shiftMonthsBackward","offset","prevVisMonth","clone","newStartMonth","subtract","floor","updateMonths","shifting","minDate","maxDate","restrictMonthNavigation","_newStartMonth","isBefore","add","isAfter","push","maxSimultaneousMonths","setState","dataProvider","cloneWithRows","onVisibleIndicesChanged","all","now","_currentMonth","updateMonthYear","onMonthChange","currMonth","onLayout","event","containerWidth","nativeEvent","layout","width","itemWidth","updateLayout","renderMonthParams","styles","rowRenderer","type","rowMonth","extState","renderMonth","month","year","currentYear","dims","itemHeight","containerHeight","dayWrapper","height","layoutProvider","dim","r1","r2","updateMonthsData","prevProps","prevState","newState","updateState","Platform","OS","selectedStartDate","initialRenderIndex","horizontal","showsHorizontalScrollIndicator","snapToInterval","propTypes","array","isRequired","number","func","object","any","bool","defaultProps"],"mappings":"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","sourcesContent":["// This is a bi-directional infinite scroller.\r\n// As the beginning & end are reached, the dates are recalculated and the current\r\n// index adjusted to match the previous visible date.\r\n// RecyclerListView helps to efficiently recycle instances, but the data that\r\n// it's fed is finite. Hence the data must be shifted at the ends to appear as\r\n// an infinite scroller.\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Platform } from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport { RecyclerListView, DataProvider, LayoutProvider } from 'recyclerlistview';\r\nimport moment from 'moment';\r\n\r\nexport default class CalendarScroller extends Component {\r\n  static propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    initialRenderIndex: PropTypes.number,\r\n    renderMonth: PropTypes.func,\r\n    renderMonthParams: PropTypes.object.isRequired,\r\n    minDate: PropTypes.any,\r\n    maxDate: PropTypes.any,\r\n    maxSimultaneousMonths: PropTypes.number,\r\n    horizontal: PropTypes.bool,\r\n    updateMonthYear: PropTypes.func,\r\n    onMonthChange: PropTypes.func,\r\n  }\r\n\r\n  static defaultProps = {\r\n    data: [],\r\n    renderMonthParams: { styles: {} },\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.updateLayout = dims => {\r\n      const itemWidth = dims.containerWidth;\r\n      let itemHeight = dims.containerHeight;\r\n      if (dims.dayWrapper && dims.dayWrapper.height) {\r\n        itemHeight = dims.dayWrapper.height * 6; // max 6 row weeks per month\r\n      }\r\n\r\n      const layoutProvider = new LayoutProvider(\r\n        () => 0, // only 1 view type\r\n        (type, dim) => {\r\n          dim.width = itemWidth;\r\n          dim.height = itemHeight;\r\n        }\r\n      );\r\n\r\n      return { layoutProvider, itemHeight, itemWidth };\r\n    };\r\n\r\n    this.dataProvider = new DataProvider((r1, r2) => {\r\n      return r1 !== r2;\r\n    });\r\n\r\n    this.updateMonthsData = data => {\r\n      return {\r\n        data,\r\n        numMonths: data.length,\r\n        dataProvider: this.dataProvider.cloneWithRows(data),\r\n      };\r\n    };\r\n\r\n    this.state = {\r\n      ...this.updateLayout(props.renderMonthParams.styles),\r\n      ...this.updateMonthsData(props.data),\r\n      numVisibleItems: 1, // updated in onLayout\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(prevProps, prevState) {\r\n    return this.state.data !== prevState.data ||\r\n      this.state.itemHeight !== prevState.itemHeight ||\r\n      this.state.itemWidth !== prevState.itemWidth ||\r\n      this.props.renderMonthParams !== prevProps.renderMonthParams;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let newState = {};\r\n    let updateState = false;\r\n\r\n    if (this.props.renderMonthParams.styles !== prevProps.renderMonthParams.styles) {\r\n      updateState = true;\r\n      newState = this.updateLayout(this.props.renderMonthParams);\r\n    }\r\n\r\n    if (this.props.data !== prevProps.data) {\r\n      updateState = true;\r\n      newState = {...newState, ...this.updateMonthsData(this.props.data)};\r\n    }\r\n\r\n    if (Platform.OS === 'android' &&\r\n        this.props.renderMonthParams.selectedStartDate !== prevProps.renderMonthParams.selectedStartDate)\r\n    {\r\n      // Android unexpectedly jumps to previous month on first selected date.\r\n      // Scroll RLV to selected date's month.\r\n      this.goToDate(this.props.renderMonthParams.selectedStartDate, 100);\r\n    }\r\n\r\n    if (updateState) {\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  goToDate = (date, delay) => {\r\n    const data = this.state.data;\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].isSame(date, 'month')) {\r\n        if (delay) {\r\n          setTimeout(() =>  this.rlv && this.rlv.scrollToIndex(i, false), delay);\r\n        }\r\n        else {\r\n          this.rlv && this.rlv.scrollToIndex(i, false);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Scroll left, guarding against start index.\r\n  scrollLeft = () => {\r\n    const { currentIndex, numVisibleItems } = this.state;\r\n    if (currentIndex === 0) {\r\n      return;\r\n    }\r\n    const newIndex = Math.max(currentIndex - numVisibleItems, 0);\r\n    this.rlv && this.rlv.scrollToIndex(newIndex, true);\r\n  }\r\n\r\n  // Scroll right, guarding against end index.\r\n  scrollRight = () => {\r\n    const { currentIndex, numVisibleItems, numMonths } = this.state;\r\n    const newIndex = Math.min(currentIndex + numVisibleItems, numMonths - 1);\r\n    this.rlv && this.rlv.scrollToIndex(newIndex, true);\r\n  }\r\n\r\n  // Shift dates when end of list is reached.\r\n  shiftMonthsForward = currentMonth => {\r\n    this.shiftMonths(currentMonth, this.state.numMonths / 3);\r\n  }\r\n\r\n  // Shift dates when beginning of list is reached.\r\n  shiftMonthsBackward = currentMonth => {\r\n    this.shiftMonths(currentMonth, this.state.numMonths * 2/3);\r\n  }\r\n\r\n  shiftMonths = (currentMonth, offset) => {\r\n    const prevVisMonth = currentMonth.clone();\r\n    const newStartMonth = prevVisMonth.clone().subtract(Math.floor(offset), 'months');\r\n    this.updateMonths(prevVisMonth, newStartMonth);\r\n  }\r\n\r\n  updateMonths = (prevVisMonth, newStartMonth) => {\r\n    if (this.shifting) {\r\n      return;\r\n    }\r\n    const {\r\n      minDate,\r\n      maxDate,\r\n      restrictMonthNavigation,\r\n    } = this.props;\r\n    const data = [];\r\n    let _newStartMonth = newStartMonth;\r\n    if (minDate && restrictMonthNavigation && newStartMonth.isBefore(minDate, 'month')) {\r\n      _newStartMonth = moment(minDate);\r\n    }\r\n    for (let i = 0; i < this.state.numMonths; i++) {\r\n      let date = _newStartMonth.clone().add(i, 'months');\r\n      if (maxDate && restrictMonthNavigation && date.isAfter(maxDate, 'month')) {\r\n        break;\r\n      }\r\n      data.push(date);\r\n    }\r\n    // Prevent reducing range when the minDate - maxDate range is small.\r\n    if (data.length < this.props.maxSimultaneousMonths) {\r\n      return;\r\n    }\r\n\r\n    // Scroll to previous date\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].isSame(prevVisMonth, 'month')) {\r\n        this.shifting = true;\r\n        this.rlv && this.rlv.scrollToIndex(i, false);\r\n        // RecyclerListView sometimes returns position to old index after\r\n        // moving to the new one. Set position again after delay.\r\n        setTimeout(() => {\r\n          this.rlv && this.rlv.scrollToIndex(i, false);\r\n          this.shifting = false; // debounce\r\n        }, 800);\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      data,\r\n      dataProvider: this.dataProvider.cloneWithRows(data),\r\n    });\r\n  }\r\n\r\n  // Track which dates are visible.\r\n  onVisibleIndicesChanged = (all, now) => {\r\n    const {\r\n      data,\r\n      numMonths,\r\n      currentMonth: _currentMonth,\r\n    } = this.state;\r\n\r\n    const {\r\n      updateMonthYear,\r\n      onMonthChange,\r\n    } = this.props;\r\n\r\n    // \"now\" contains the inflight indices, whereas \"all\" reflects indices\r\n    // after scrolling has settled. Prioritize \"now\" for faster header updates.\r\n    const currentIndex = now[0] || all[0];\r\n    const currentMonth = data[currentIndex]; // a Moment date\r\n\r\n    // Fire month/year update on month changes.  This is\r\n    // necessary for the header and onMonthChange updates.\r\n    if (!_currentMonth || !_currentMonth.isSame(currentMonth, 'month')) {\r\n      const currMonth = currentMonth && currentMonth.clone();\r\n      onMonthChange && onMonthChange(currMonth);\r\n    }\r\n\r\n    updateMonthYear && updateMonthYear(currentMonth, true);\r\n\r\n    if (currentIndex === 0) {\r\n      this.shiftMonthsBackward(currentMonth);\r\n    } else if (currentIndex > numMonths - 3) {\r\n      this.shiftMonthsForward(currentMonth);\r\n    }\r\n    this.setState({\r\n      currentMonth,\r\n      currentIndex,\r\n    });\r\n  }\r\n\r\n  onLayout = event => {\r\n    const containerWidth = event.nativeEvent.layout.width;\r\n    this.setState({\r\n      numVisibleItems: Math.floor(containerWidth / this.state.itemWidth),\r\n      ...this.updateLayout(this.props.renderMonthParams.styles),\r\n    });\r\n  }\r\n\r\n  rowRenderer = (type, rowMonth, i, extState) => {\r\n    const { updateMonthYear, renderMonth } = this.props;\r\n    const { currentMonth: month, currentYear: year } = updateMonthYear(rowMonth);\r\n    return renderMonth && renderMonth({...extState, month, year});\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      data,\r\n      numMonths,\r\n      itemHeight: height,\r\n      itemWidth: width,\r\n      layoutProvider,\r\n      dataProvider,\r\n    } = this.state;\r\n    if (!data || numMonths === 0 || !height) {\r\n      return null;\r\n    }\r\n    return (\r\n      <View style={{ width, height }} onLayout={this.onLayout}>\r\n        <RecyclerListView\r\n          ref={rlv => this.rlv = rlv}\r\n          layoutProvider={layoutProvider}\r\n          dataProvider={dataProvider}\r\n          rowRenderer={this.rowRenderer}\r\n          extendedState={this.props.renderMonthParams}\r\n          initialRenderIndex={this.props.initialRenderIndex}\r\n          onVisibleIndicesChanged={this.onVisibleIndicesChanged}\r\n          isHorizontal={this.props.horizontal}\r\n          scrollViewProps={{\r\n            showsHorizontalScrollIndicator: false,\r\n            snapToInterval: this.props.horizontal ? width : height,\r\n          }}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}