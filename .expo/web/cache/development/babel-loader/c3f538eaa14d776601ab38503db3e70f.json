{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/olivermou/Documents/GitHub/aicare/node_modules/react-native-calendar-picker/CalendarPicker/DaysGridView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport { stylePropType } from \"./localPropTypes\";\nimport Day from \"./Day\";\nimport EmptyDay from \"./EmptyDay\";\nimport { Utils } from \"./Utils\";\nimport moment from 'moment';\n\nvar DaysGridView = function (_Component) {\n  _inherits(DaysGridView, _Component);\n\n  var _super = _createSuper(DaysGridView);\n\n  function DaysGridView(props) {\n    var _this;\n\n    _classCallCheck(this, DaysGridView);\n\n    _this = _super.call(this, props);\n\n    _this.generateDaysGrid = function (params) {\n      var numDaysInWeek = params.numDaysInWeek,\n          maxWeekRows = params.maxWeekRows,\n          startIndex = params.startIndex,\n          numDaysInMonth = params.numDaysInMonth,\n          numDaysInPrevMonth = params.numDaysInPrevMonth;\n      var daysGrid = [[]];\n      var dayOfMonth = 1;\n      var dayNextMonth = 1;\n      var lastFilledRow = 0;\n\n      for (var i = 0; i < maxWeekRows; i++) {\n        daysGrid[i] = [];\n\n        for (var j = 0; j < numDaysInWeek; j++) {\n          if (i === 0) {\n            if (j >= startIndex) {\n              if (dayOfMonth <= numDaysInMonth) {\n                daysGrid[i].push(_this.renderDayInCurrentMonth(dayOfMonth++));\n              }\n            } else {\n              var key = '' + i + j;\n              daysGrid[i].push(_this.props.showDayStragglers ? _this.renderDayStraggler({\n                key: key,\n                day: numDaysInPrevMonth - startIndex + j + 1\n              }) : _this.renderEmptyDay(key));\n            }\n          } else {\n            if (dayOfMonth <= numDaysInMonth) {\n              lastFilledRow = i;\n              daysGrid[i].push(_this.renderDayInCurrentMonth(dayOfMonth++));\n            } else {\n              if (_this.props.showDayStragglers && i <= lastFilledRow) {\n                daysGrid[i].push(_this.renderDayStraggler({\n                  key: '' + i + j,\n                  day: dayNextMonth++\n                }));\n              }\n            }\n          }\n        }\n      }\n\n      return daysGrid;\n    };\n\n    _this.initMonthSettings = function (props) {\n      var month = props.month,\n          year = props.year,\n          showDayStragglers = props.showDayStragglers,\n          startFromMonday = props.startFromMonday;\n      var numDaysInMonth = Utils.getDaysInMonth(month, year);\n      var prevMonth, prevMonthYear;\n      var numDaysInPrevMonth;\n\n      if (showDayStragglers) {\n        prevMonth = month - 1;\n        prevMonthYear = year;\n\n        if (prevMonth < 0) {\n          prevMonth = 11;\n          prevMonthYear--;\n        }\n\n        numDaysInPrevMonth = Utils.getDaysInMonth(prevMonth, prevMonthYear);\n      }\n\n      var firstDayOfMonth = moment({\n        year: year,\n        month: month,\n        day: 1\n      });\n      var firstWeekDay = firstDayOfMonth.isoWeekday();\n      var startIndex = (startFromMonday ? firstWeekDay - 1 : firstWeekDay) % 7;\n      return {\n        maxWeekRows: 6,\n        numDaysInWeek: 7,\n        numDaysInMonth: numDaysInMonth,\n        numDaysInPrevMonth: numDaysInPrevMonth,\n        firstDayOfMonth: firstDayOfMonth,\n        firstWeekDay: firstWeekDay,\n        startIndex: startIndex\n      };\n    };\n\n    var monthSettings = _this.initMonthSettings(props);\n\n    _this.state = {\n      monthSettings: monthSettings,\n      daysGrid: _this.generateDaysGrid(monthSettings)\n    };\n    return _this;\n  }\n\n  _createClass(DaysGridView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var propDiffs = Utils.shallowDiff(this.props, prevProps, ['selectedStartDate', 'selectedEndDate']);\n\n      if (propDiffs.length) {\n        var monthSettings = this.initMonthSettings(this.props);\n        this.setState({\n          monthSettings: monthSettings,\n          daysGrid: this.generateDaysGrid(monthSettings)\n        });\n      } else {\n        var _this$props = this.props,\n            selectedStartDate = _this$props.selectedStartDate,\n            selectedEndDate = _this$props.selectedEndDate;\n        var prevSelStart = prevProps.selectedStartDate,\n            prevSelEnd = prevProps.selectedEndDate;\n        var firstDayOfMonth = this.state.monthSettings.firstDayOfMonth;\n        var isSelectedDiff = !Utils.compareDates(selectedStartDate, prevSelStart, 'day') || !Utils.compareDates(selectedEndDate, prevSelEnd, 'day');\n\n        if (isSelectedDiff && (Utils.compareDates(selectedStartDate, firstDayOfMonth, 'month') || Utils.compareDates(selectedEndDate, firstDayOfMonth, 'month') || Utils.compareDates(prevSelStart, firstDayOfMonth, 'month') || Utils.compareDates(prevSelEnd, firstDayOfMonth, 'month'))) {\n          if (this.props.allowRangeSelection) {\n            this.setState({\n              daysGrid: this.generateDaysGrid(this.state.monthSettings)\n            });\n          } else {\n            var daysGrid = _toConsumableArray(this.state.daysGrid);\n\n            var year = this.props.year;\n\n            for (var i = 0; i < daysGrid.length; i++) {\n              for (var j = 0; j < daysGrid[i].length; j++) {\n                var _daysGrid$i$j = daysGrid[i][j],\n                    month = _daysGrid$i$j.month,\n                    day = _daysGrid$i$j.day;\n\n                if (month === undefined) {\n                  continue;\n                }\n\n                var thisDay = {\n                  year: year,\n                  month: month,\n                  day: day\n                };\n                var isSelected = Utils.compareDates(selectedStartDate, thisDay, 'day');\n                var isPrevSelected = Utils.compareDates(prevSelStart, thisDay, 'day');\n\n                if (isSelected || isPrevSelected) {\n                  daysGrid[i][j] = this.renderDayInCurrentMonth(day);\n                }\n              }\n            }\n\n            this.setState({\n              daysGrid: daysGrid\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"renderDayInCurrentMonth\",\n    value: function renderDayInCurrentMonth(day) {\n      return {\n        day: day,\n        month: this.props.month,\n        component: React.createElement(Day, _extends({\n          key: day,\n          day: day\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 9\n          }\n        }))\n      };\n    }\n  }, {\n    key: \"renderEmptyDay\",\n    value: function renderEmptyDay(key) {\n      return {\n        component: React.createElement(EmptyDay, {\n          key: 'empty' + key,\n          styles: this.props.styles,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 9\n          }\n        })\n      };\n    }\n  }, {\n    key: \"renderDayStraggler\",\n    value: function renderDayStraggler(_ref) {\n      var key = _ref.key,\n          day = _ref.day;\n      return {\n        day: day,\n        component: React.createElement(Day, {\n          key: key,\n          day: day,\n          styles: this.props.styles,\n          disabledDates: function disabledDates() {\n            return true;\n          },\n          disabledDatesTextStyle: this.props.disabledDatesTextStyle,\n          textStyle: this.props.textStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }\n        })\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var styles = this.props.styles;\n      var daysGrid = this.state.daysGrid;\n      var renderedDaysGrid = daysGrid.map(function (weekRow, i) {\n        return React.createElement(View, {\n          key: i,\n          style: styles.weekRow,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 7\n          }\n        }, weekRow.map(function (day) {\n          return day.component;\n        }));\n      });\n      return React.createElement(View, {\n        style: styles.daysWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }\n      }, renderedDaysGrid);\n    }\n  }]);\n\n  return DaysGridView;\n}(Component);\n\nexport { DaysGridView as default };\nDaysGridView.propTypes = {\n  styles: stylePropType,\n  month: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  onPressDay: PropTypes.func,\n  startFromMonday: PropTypes.bool,\n  selectedDayStyle: stylePropType,\n  selectedRangeStartStyle: stylePropType,\n  selectedRangeStyle: stylePropType,\n  selectedRangeEndStyle: stylePropType,\n  todayTextStyle: stylePropType,\n  selectedDayTextStyle: stylePropType,\n  customDatesStyles: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date), PropTypes.instanceOf(moment)]),\n    containerStyle: stylePropType,\n    style: stylePropType,\n    textStyle: stylePropType\n  }))]),\n  disabledDates: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n  disabledDatesTextStyle: stylePropType,\n  minRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  maxRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number])\n};","map":{"version":3,"sources":["/Users/olivermou/Documents/GitHub/aicare/node_modules/react-native-calendar-picker/CalendarPicker/DaysGridView.js"],"names":["React","Component","PropTypes","stylePropType","Day","EmptyDay","Utils","moment","DaysGridView","props","generateDaysGrid","params","numDaysInWeek","maxWeekRows","startIndex","numDaysInMonth","numDaysInPrevMonth","daysGrid","dayOfMonth","dayNextMonth","lastFilledRow","i","j","push","renderDayInCurrentMonth","key","showDayStragglers","renderDayStraggler","day","renderEmptyDay","initMonthSettings","month","year","startFromMonday","getDaysInMonth","prevMonth","prevMonthYear","firstDayOfMonth","firstWeekDay","isoWeekday","monthSettings","state","prevProps","propDiffs","shallowDiff","length","setState","selectedStartDate","selectedEndDate","prevSelStart","prevSelEnd","isSelectedDiff","compareDates","allowRangeSelection","undefined","thisDay","isSelected","isPrevSelected","component","styles","disabledDatesTextStyle","textStyle","renderedDaysGrid","map","weekRow","daysWrapper","propTypes","number","isRequired","onPressDay","func","bool","selectedDayStyle","selectedRangeStartStyle","selectedRangeStyle","selectedRangeEndStyle","todayTextStyle","selectedDayTextStyle","customDatesStyles","oneOfType","arrayOf","shape","date","string","instanceOf","Date","containerStyle","style","disabledDates","array","minRangeDuration","maxRangeDuration"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View } from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport { stylePropType } from './localPropTypes';\r\nimport Day from './Day';\r\nimport EmptyDay from './EmptyDay';\r\nimport { Utils } from './Utils';\r\nimport moment from 'moment';\r\n\r\nexport default class DaysGridView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.initMonthSettings = props => {\r\n      const {\r\n        month,\r\n        year,\r\n        showDayStragglers,\r\n        startFromMonday,\r\n      } = props;\r\n\r\n      // Retrieve total days in this month & year, accounting for leap years.\r\n      const numDaysInMonth = Utils.getDaysInMonth(month, year);\r\n\r\n      // Calculate days in prev month for day stragglers.\r\n      let prevMonth, prevMonthYear;\r\n      let numDaysInPrevMonth;\r\n      if (showDayStragglers) {\r\n        prevMonth = month - 1;\r\n        prevMonthYear = year;\r\n        if (prevMonth < 0) {\r\n          prevMonth = 11;\r\n          prevMonthYear--;\r\n        }\r\n        numDaysInPrevMonth = Utils.getDaysInMonth(prevMonth, prevMonthYear);\r\n      }\r\n\r\n      // Create a date for day one of the current given month and year\r\n      const firstDayOfMonth = moment({ year, month, day: 1 });\r\n\r\n      // Determine which day of the week day 1 falls on.\r\n      // See https://github.com/stephy/CalendarPicker/issues/49\r\n      // isoWeekday() gets the ISO day of the week with 1=Monday and 7=Sunday.\r\n      const firstWeekDay = firstDayOfMonth.isoWeekday();\r\n\r\n      // Determine starting index based on first day of week as Monday or Sunday.\r\n      const startIndex = (startFromMonday ? firstWeekDay - 1 : firstWeekDay) % 7;\r\n\r\n      return {\r\n        maxWeekRows: 6,\r\n        numDaysInWeek: 7,\r\n        numDaysInMonth,\r\n        numDaysInPrevMonth,\r\n        firstDayOfMonth,\r\n        firstWeekDay,\r\n        startIndex,\r\n      };\r\n    };\r\n\r\n    const monthSettings = this.initMonthSettings(props);\r\n    this.state = {\r\n      monthSettings,\r\n      daysGrid: this.generateDaysGrid(monthSettings),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Optimize re-renders by checking props, with special handling for selected dates.\r\n    // Shallow compare prop changes, excluding selected dates.\r\n    const propDiffs = Utils.shallowDiff(this.props, prevProps, ['selectedStartDate', 'selectedEndDate']);\r\n    if (propDiffs.length) {\r\n      // Recreate days\r\n      const monthSettings = this.initMonthSettings(this.props);\r\n      this.setState({\r\n        monthSettings,\r\n        daysGrid: this.generateDaysGrid(monthSettings),\r\n      });\r\n    }\r\n    else {\r\n      // Update daysGrid entries when selected date(s) affect this month.\r\n      const { selectedStartDate, selectedEndDate } = this.props;\r\n      const { selectedStartDate: prevSelStart, selectedEndDate: prevSelEnd } = prevProps;\r\n      const { firstDayOfMonth } = this.state.monthSettings;\r\n      const isSelectedDiff =\r\n        !Utils.compareDates(selectedStartDate, prevSelStart, 'day') ||\r\n        !Utils.compareDates(selectedEndDate, prevSelEnd, 'day');\r\n      // Check that selected date(s) match this month.\r\n      if (isSelectedDiff && (\r\n        Utils.compareDates(selectedStartDate, firstDayOfMonth, 'month') ||\r\n          Utils.compareDates(selectedEndDate, firstDayOfMonth, 'month') ||\r\n          Utils.compareDates(prevSelStart, firstDayOfMonth, 'month') ||\r\n          Utils.compareDates(prevSelEnd, firstDayOfMonth, 'month') ))\r\n      {\r\n        // Range selection potentially affects all dates in the month. Recreate.\r\n        if (this.props.allowRangeSelection) {\r\n          this.setState({\r\n            daysGrid: this.generateDaysGrid(this.state.monthSettings),\r\n          });\r\n        }\r\n        else {\r\n          // Search for affected dates and modify those only\r\n          const daysGrid = [...this.state.daysGrid];\r\n          const { year } = this.props;\r\n          for (let i = 0; i <daysGrid.length; i++) {\r\n            for (let j = 0; j <daysGrid[i].length; j++) {\r\n              const { month, day } = daysGrid[i][j];\r\n              // Empty days and stragglers can't be selected.\r\n              if (month === undefined) { continue; }\r\n              // Check single date\r\n              const thisDay = { year, month, day };\r\n              const isSelected = Utils.compareDates(selectedStartDate, thisDay, 'day');\r\n              const isPrevSelected = Utils.compareDates(prevSelStart, thisDay, 'day');\r\n              if (isSelected || isPrevSelected)\r\n              {\r\n                daysGrid[i][j] = this.renderDayInCurrentMonth(day);\r\n              }\r\n            }\r\n          }\r\n          this.setState({ daysGrid });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderDayInCurrentMonth(day) {\r\n    return ({\r\n      day,\r\n      month: this.props.month,\r\n      component: (\r\n        <Day\r\n          key={day}\r\n          day={day}\r\n          {...this.props}\r\n        />\r\n      ),\r\n    });\r\n  }\r\n\r\n  renderEmptyDay(key) {\r\n    return ({\r\n      component: (\r\n        <EmptyDay\r\n          key={'empty' + key}\r\n          styles={this.props.styles}\r\n        />\r\n      ),\r\n    });\r\n  }\r\n\r\n  renderDayStraggler({key, day}) {\r\n    return ({\r\n      day,\r\n      // month doesn't matter for stragglers as long as isn't set to current month\r\n      component: (\r\n        <Day\r\n          key={key}\r\n          day={day}\r\n          styles={this.props.styles}\r\n          disabledDates={() => true}\r\n          disabledDatesTextStyle={this.props.disabledDatesTextStyle}\r\n          textStyle={this.props.textStyle}\r\n        />\r\n      )\r\n    });\r\n  }\r\n\r\n  // Create grid of days.\r\n  generateDaysGrid = params => {\r\n    const {\r\n      numDaysInWeek,\r\n      maxWeekRows,\r\n      startIndex,\r\n      numDaysInMonth,\r\n      numDaysInPrevMonth\r\n    } = params;\r\n    let daysGrid = [[]];\r\n    let dayOfMonth = 1;\r\n    let dayNextMonth = 1;\r\n    let lastFilledRow = 0;\r\n\r\n    // Week rows\r\n    for (let i = 0; i < maxWeekRows; i++) {\r\n      daysGrid[i] = [];\r\n      // Days in week\r\n      for (let j = 0; j < numDaysInWeek; j++) {\r\n        if (i === 0) {\r\n          // first row: start current month's day on the correct weekday\r\n          if (j >= startIndex) {\r\n            if (dayOfMonth <= numDaysInMonth) {\r\n              daysGrid[i].push(this.renderDayInCurrentMonth(dayOfMonth++));\r\n            }\r\n          } else {\r\n            const key = '' + i + j;\r\n            daysGrid[i].push(this.props.showDayStragglers ?\r\n              // Show previous month's days\r\n              this.renderDayStraggler({\r\n                key,\r\n                day: numDaysInPrevMonth - startIndex + j + 1,\r\n              })\r\n              :\r\n              //... otherwise blank\r\n              this.renderEmptyDay(key)\r\n            );\r\n          }\r\n        } else {\r\n          if (dayOfMonth <= numDaysInMonth) {\r\n            lastFilledRow = i;\r\n            daysGrid[i].push(this.renderDayInCurrentMonth(dayOfMonth++));\r\n          }\r\n          else {\r\n            if (this.props.showDayStragglers && i <= lastFilledRow) {\r\n              // Show next month's days\r\n              daysGrid[i].push(this.renderDayStraggler({\r\n                key: '' + i + j,\r\n                day: dayNextMonth++,\r\n              }));\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return daysGrid;\r\n  }\r\n\r\n  render() {\r\n    const { styles } = this.props;\r\n    const { daysGrid } = this.state;\r\n    const renderedDaysGrid = daysGrid.map((weekRow, i) => (\r\n      <View key={i} style={styles.weekRow}>\r\n        { weekRow.map(day => day.component ) }\r\n      </View>\r\n    ));\r\n\r\n    return (\r\n      <View style={styles.daysWrapper}>\r\n        { renderedDaysGrid }\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nDaysGridView.propTypes = {\r\n  styles: stylePropType,\r\n  month: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  onPressDay: PropTypes.func,\r\n  startFromMonday: PropTypes.bool,\r\n  selectedDayStyle: stylePropType,\r\n  selectedRangeStartStyle: stylePropType,\r\n  selectedRangeStyle: stylePropType,\r\n  selectedRangeEndStyle: stylePropType,\r\n  todayTextStyle: stylePropType,\r\n  selectedDayTextStyle: stylePropType,\r\n  customDatesStyles: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.arrayOf(PropTypes.shape({\r\n      date: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.instanceOf(Date),\r\n        PropTypes.instanceOf(moment)\r\n      ]),\r\n      containerStyle: stylePropType,\r\n      style: stylePropType,\r\n      textStyle: stylePropType,\r\n    })),\r\n  ]),\r\n  disabledDates: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\r\n  disabledDatesTextStyle: stylePropType,\r\n  minRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n  maxRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}