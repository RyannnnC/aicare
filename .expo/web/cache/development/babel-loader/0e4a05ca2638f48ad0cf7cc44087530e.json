{"ast":null,"code":"export var Utils = {\n  START_DATE: 'START_DATE',\n  END_DATE: 'END_DATE',\n  WEEKDAYS: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  WEEKDAYS_MON: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n  MONTHS: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  MAX_ROWS: 7,\n  MAX_COLUMNS: 7,\n  getDaysInMonth: function getDaysInMonth(month, year) {\n    var lastDayOfMonth = new Date(year, month + 1, 0);\n    return lastDayOfMonth.getDate();\n  },\n  isSameMonthAndYear: function isSameMonthAndYear(date, month, year) {\n    if (date) {\n      return date.month() === month && date.year() === year;\n    }\n\n    return false;\n  },\n  shallowDiff: function shallowDiff(a, b) {\n    var exclusions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var diffs = [];\n\n    for (var _i = 0, _Object$keys = Object.keys(a); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n\n      if (exclusions.includes(key)) {\n        continue;\n      }\n\n      if (a[key] !== b[key]) {\n        diffs.push(key);\n      }\n    }\n\n    return diffs;\n  },\n  compareDates: function compareDates(a, b, granularity) {\n    if (!a && !b) {\n      return true;\n    }\n\n    return !!a && !!b && a.isSame(b, granularity);\n  }\n};","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-calendar-picker/CalendarPicker/Utils.js"],"names":["Utils","START_DATE","END_DATE","WEEKDAYS","WEEKDAYS_MON","MONTHS","MAX_ROWS","MAX_COLUMNS","getDaysInMonth","month","year","lastDayOfMonth","Date","getDate","isSameMonthAndYear","date","shallowDiff","a","b","exclusions","diffs","Object","keys","key","includes","push","compareDates","granularity","isSame"],"mappings":"AAOA,OAAO,IAAMA,KAAK,GAAG;AACnBC,EAAAA,UAAU,EAAE,YADO;AAEnBC,EAAAA,QAAQ,EAAE,UAFS;AAGnBC,EAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAHS;AAInBC,EAAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAJK;AAKnBC,EAAAA,MAAM,EAAE,CACN,SADM,EACK,UADL,EACiB,OADjB,EAC0B,OAD1B,EACmC,KADnC,EAC0C,MAD1C,EACkD,MADlD,EAEN,QAFM,EAEI,WAFJ,EAEiB,SAFjB,EAE4B,UAF5B,EAEwC,UAFxC,CALW;AASnBC,EAAAA,QAAQ,EAAE,CATS;AAUnBC,EAAAA,WAAW,EAAE,CAVM;AAWnBC,EAAAA,cAAc,EAAE,wBAASC,KAAT,EAAgBC,IAAhB,EAAsB;AACpC,QAAMC,cAAc,GAAG,IAAIC,IAAJ,CAASF,IAAT,EAAeD,KAAK,GAAG,CAAvB,EAA0B,CAA1B,CAAvB;AACA,WAAOE,cAAc,CAACE,OAAf,EAAP;AACD,GAdkB;AAenBC,EAAAA,kBAAkB,EAAE,4BAASC,IAAT,EAAeN,KAAf,EAAsBC,IAAtB,EAA4B;AAC9C,QAAIK,IAAJ,EAAU;AACR,aAAOA,IAAI,CAACN,KAAL,OAAiBA,KAAjB,IAA0BM,IAAI,CAACL,IAAL,OAAgBA,IAAjD;AACD;;AACD,WAAO,KAAP;AACD,GApBkB;AAwBnBM,EAAAA,WAAW,EAAE,qBAASC,CAAT,EAAYC,CAAZ,EAAgC;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;AAC3C,QAAMC,KAAK,GAAG,EAAd;;AACA,oCAAgBC,MAAM,CAACC,IAAP,CAAYL,CAAZ,CAAhB,kCAAgC;AAA3B,UAAIM,GAAG,mBAAP;;AACH,UAAIJ,UAAU,CAACK,QAAX,CAAoBD,GAApB,CAAJ,EAA8B;AAC5B;AACD;;AACD,UAAIN,CAAC,CAACM,GAAD,CAAD,KAAWL,CAAC,CAACK,GAAD,CAAhB,EAAuB;AACrBH,QAAAA,KAAK,CAACK,IAAN,CAAWF,GAAX;AACD;AACF;;AACD,WAAOH,KAAP;AACD,GAnCkB;AAqCnBM,EAAAA,YAAY,EAAE,sBAAST,CAAT,EAAYC,CAAZ,EAAeS,WAAf,EAA4B;AAExC,QAAI,CAACV,CAAD,IAAM,CAACC,CAAX,EAAc;AACZ,aAAO,IAAP;AACD;;AACD,WAAO,CAAC,CAACD,CAAF,IAAO,CAAC,CAACC,CAAT,IAAcD,CAAC,CAACW,MAAF,CAASV,CAAT,EAAYS,WAAZ,CAArB;AACD;AA3CkB,CAAd","sourcesContent":["/**\r\n * Calendar Picker Component\r\n *\r\n * Copyright 2016 Yahoo Inc.\r\n * Licensed under the terms of the MIT license. See LICENSE file in the project root for terms.\r\n */\r\n\r\nexport const Utils = {\r\n  START_DATE: 'START_DATE',\r\n  END_DATE: 'END_DATE',\r\n  WEEKDAYS: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  WEEKDAYS_MON: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n  MONTHS: [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July',\r\n    'August', 'September', 'October', 'November', 'December'\r\n  ],\r\n  MAX_ROWS: 7,\r\n  MAX_COLUMNS: 7,\r\n  getDaysInMonth: function(month, year) {\r\n    const lastDayOfMonth = new Date(year, month + 1, 0);\r\n    return lastDayOfMonth.getDate();\r\n  },\r\n  isSameMonthAndYear: function(date, month, year) {\r\n    if (date) {\r\n      return date.month() === month && date.year() === year;\r\n    }\r\n    return false;\r\n  },\r\n  // Test whether objects' values are different.\r\n  // `exclusions` param ignores provided keys.\r\n  // Returns array of keys that are different (empty array means identical).\r\n  shallowDiff: function(a, b, exclusions = []) {\r\n    const diffs = [];\r\n    for (let key of Object.keys(a)) {\r\n      if (exclusions.includes(key)) {\r\n        continue;\r\n      }\r\n      if (a[key] !== b[key]) {\r\n        diffs.push(key);\r\n      }\r\n    }\r\n    return diffs;\r\n  },\r\n  // Robust compare Moment dates.\r\n  compareDates: function(a, b, granularity) {\r\n    // Allow for falsy (null & undefined) equality.\r\n    if (!a && !b) {\r\n      return true;\r\n    }\r\n    return !!a && !!b && a.isSame(b, granularity);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}