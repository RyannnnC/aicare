{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from \"react\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport PropTypes from \"prop-types\";\nimport RNImageHelper from 'react-native-image-helper';\nvar RNBottomActionSheet = NativeModules.RNBottomActionSheet;\n\nvar GridView = function (_PureComponent) {\n  _inherits(GridView, _PureComponent);\n\n  var _super = _createSuper(GridView);\n\n  function GridView() {\n    _classCallCheck(this, GridView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GridView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._show();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._show();\n    }\n  }, {\n    key: \"_show\",\n    value: function _show() {\n      if (this.props.visible) {\n        var props = this.props;\n        var items = [];\n        React.Children.map(this.props.children, function (item, index) {\n          items.push({\n            title: item.props.title,\n            icon: item.props.icon,\n            divider: false\n          });\n        });\n        GridView.Show(_extends({}, props, {\n          items: items\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }], [{\n    key: \"Show\",\n    value: function Show(props) {\n      if (props.title === undefined) props.title = GridView.defaultProps.title;\n      if (props.items === undefined) props.items = GridView.defaultProps.items;\n      if (props.theme === undefined) props.theme = GridView.defaultProps.theme;\n      if (props.itemTextColor === undefined) props.itemTextColor = GridView.defaultProps.itemTextColor;\n      if (props.itemTintColor === undefined) props.itemTintColor = GridView.defaultProps.itemTintColor;\n      if (props.backgroundColor === undefined) props.backgroundColor = GridView.defaultProps.backgroundColor;\n      props.items = props.items.map(function (element) {\n        if (element.icon && element.icon.props) {\n          element.icon = element.icon.props;\n          var vectorIcon = RNImageHelper.Resolve(element.icon.family, element.icon.name);\n          element.icon = _extends({}, element.icon, vectorIcon);\n        } else if (element.icon !== undefined) {\n          element.icon = {\n            name: element.icon,\n            family: \"\",\n            glyph: \"\",\n            color: \"\",\n            size: 0\n          };\n        } else {\n          element.icon = {};\n        }\n\n        element.divider = false;\n        return element;\n      });\n      RNBottomActionSheet.GridView({\n        title: props.title,\n        items: props.items,\n        theme: props.theme,\n        itemTextColor: props.itemTextColor,\n        itemTintColor: props.itemTintColor,\n        backgroundColor: props.backgroundColor\n      }, function (selectedIndex) {\n        var selectedValue = props.items[selectedIndex].value;\n        props.onSelection && props.onSelection(selectedIndex, selectedValue);\n      }, function () {\n        props.onCancel && props.onCancel();\n      });\n    }\n  }]);\n\n  return GridView;\n}(PureComponent);\n\nGridView.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  title: PropTypes.string,\n  theme: PropTypes.string,\n  itemTextColor: PropTypes.string,\n  itemTintColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  onSelection: PropTypes.func,\n  visible: PropTypes.bool\n});\nGridView.defaultProps = {\n  title: \"\",\n  theme: \"light\",\n  itemTextColor: \"\",\n  itemTintColor: \"\",\n  backgroundColor: \"\",\n  visible: false\n};\n\nvar Item = function (_PureComponent2) {\n  _inherits(Item, _PureComponent2);\n\n  var _super2 = _createSuper(Item);\n\n  function Item() {\n    _classCallCheck(this, Item);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return Item;\n}(PureComponent);\n\nItem.propTypes = {\n  title: PropTypes.string,\n  divider: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object])\n};\nItem.defaultProps = {\n  title: \"\",\n  divider: false\n};\nGridView.Item = Item;\nexport { GridView };","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-bottom-action-sheet/js/GridView.js"],"names":["React","PureComponent","ViewPropTypes","PropTypes","RNImageHelper","RNBottomActionSheet","NativeModules","GridView","_show","props","visible","items","Children","map","children","item","index","push","title","icon","divider","Show","undefined","defaultProps","theme","itemTextColor","itemTintColor","backgroundColor","element","vectorIcon","Resolve","family","name","glyph","color","size","selectedIndex","selectedValue","value","onSelection","onCancel","propTypes","string","func","bool","Item","oneOfType","number","object"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { ViewPropTypes, NativeModules } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nimport RNImageHelper from 'react-native-image-helper'\n\nconst { RNBottomActionSheet } = NativeModules;\n\nclass GridView extends PureComponent {\n  static propTypes = {\n    ...ViewPropTypes,\n\n    title: PropTypes.string,\n    theme: PropTypes.string,\n    itemTextColor: PropTypes.string,\n    itemTintColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    onSelection: PropTypes.func,\n    visible: PropTypes.bool\n  };\n\n  static defaultProps = {\n    title: \"\",\n    theme: \"light\",\n    itemTextColor: \"\",\n    itemTintColor: \"\",\n    backgroundColor: \"\",\n    visible: false\n  };\n\n  static Show(props) {\n    if (props.title === undefined) props.title = GridView.defaultProps.title;\n    if (props.items === undefined) props.items = GridView.defaultProps.items;\n    if (props.theme === undefined) props.theme = GridView.defaultProps.theme;\n    if (props.itemTextColor === undefined)\n      props.itemTextColor = GridView.defaultProps.itemTextColor;\n    if (props.itemTintColor === undefined)\n      props.itemTintColor = GridView.defaultProps.itemTintColor;\n    if (props.backgroundColor === undefined)\n      props.backgroundColor = GridView.defaultProps.backgroundColor;\n\n    props.items = props.items.map(element => {\n      if (element.icon && element.icon.props) {\n        element.icon = element.icon.props;\n\n        let vectorIcon = RNImageHelper.Resolve(\n          element.icon.family,\n          element.icon.name\n        );\n        element.icon = Object.assign({}, element.icon, vectorIcon);\n      } else if (element.icon !== undefined) {\n        element.icon = {\n          name: element.icon,\n          family: \"\",\n          glyph: \"\",\n          color: \"\",\n          size: 0\n        };\n      } else {\n        element.icon = {};\n      }\n\n      element.divider = false;\n\n      return element;\n    });\n\n    RNBottomActionSheet.GridView(\n      {\n        title: props.title,\n        items: props.items,\n        theme: props.theme,\n        itemTextColor: props.itemTextColor,\n        itemTintColor: props.itemTintColor,\n        backgroundColor: props.backgroundColor\n      },\n      selectedIndex => {\n        const selectedValue = props.items[selectedIndex].value;\n        props.onSelection && props.onSelection(selectedIndex, selectedValue);\n      },\n      () => {\n        props.onCancel && props.onCancel()\n      }\n    );\n  }\n\n  componentDidMount() {\n    this._show();\n  }\n\n  componentDidUpdate() {\n    this._show();\n  }\n\n  _show() {\n    if (this.props.visible) {\n      let props = this.props;\n      let items = [];\n\n      React.Children.map(this.props.children, (item, index) => {\n        items.push({\n          title: item.props.title,\n          icon: item.props.icon,\n          divider: false\n        });\n      });\n\n      GridView.Show(Object.assign({}, props, { items: items }));\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\n\nclass Item extends PureComponent { }\n\nItem.propTypes = {\n  title: PropTypes.string,\n  divider: PropTypes.bool,\n\n  icon: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.object\n  ])\n};\n\nItem.defaultProps = {\n  title: \"\",\n  divider: false\n};\n\nGridView.Item = Item;\n\nexport { GridView };\n"]},"metadata":{},"sourceType":"module"}