{"ast":null,"code":"var _jsxFileName = \"/Users/olivermou/Documents/GitHub/aicare/node_modules/react-native-calendar-picker/CalendarPicker/Weekdays.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport { Utils } from \"./Utils\";\nexport default function Weekdays(props) {\n  var _this = this;\n\n  var styles = props.styles,\n      startFromMonday = props.startFromMonday,\n      month = props.currentMonth,\n      year = props.currentYear,\n      weekdays = props.weekdays,\n      textStyle = props.textStyle,\n      dayLabelsWrapper = props.dayLabelsWrapper,\n      customDayHeaderStyles = props.customDayHeaderStyles;\n  var dayOfWeekNums = startFromMonday ? [1, 2, 3, 4, 5, 6, 7] : [7, 1, 2, 3, 4, 5, 6];\n  var wd = weekdays;\n\n  if (!wd) {\n    wd = startFromMonday ? Utils.WEEKDAYS_MON : Utils.WEEKDAYS;\n  }\n\n  return React.createElement(View, {\n    style: [styles.dayLabelsWrapper, dayLabelsWrapper],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, wd.map(function (day, key) {\n    var dayOfWeekTextStyle = [styles.dayLabels, textStyle];\n    var customDayOfWeekStyles = {};\n\n    if (customDayHeaderStyles instanceof Function) {\n      var dayOfWeek = dayOfWeekNums[key];\n      customDayOfWeekStyles = customDayHeaderStyles({\n        dayOfWeek: dayOfWeek,\n        month: month,\n        year: year\n      }) || {};\n      dayOfWeekTextStyle.push(customDayOfWeekStyles.textStyle);\n    }\n\n    return React.createElement(View, {\n      style: customDayOfWeekStyles.style,\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: dayOfWeekTextStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, day));\n  }));\n}\nWeekdays.propTypes = {\n  startFromMonday: PropTypes.bool,\n  weekdays: PropTypes.array,\n  customDayHeaderStyles: PropTypes.func\n};","map":{"version":3,"sources":["/Users/olivermou/Documents/GitHub/aicare/node_modules/react-native-calendar-picker/CalendarPicker/Weekdays.js"],"names":["React","PropTypes","Utils","Weekdays","props","styles","startFromMonday","month","currentMonth","year","currentYear","weekdays","textStyle","dayLabelsWrapper","customDayHeaderStyles","dayOfWeekNums","wd","WEEKDAYS_MON","WEEKDAYS","map","day","key","dayOfWeekTextStyle","dayLabels","customDayOfWeekStyles","Function","dayOfWeek","push","style","propTypes","bool","array","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAKA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAAA,MAEpCC,MAFoC,GAUlCD,KAVkC,CAEpCC,MAFoC;AAAA,MAGpCC,eAHoC,GAUlCF,KAVkC,CAGpCE,eAHoC;AAAA,MAItBC,KAJsB,GAUlCH,KAVkC,CAIpCI,YAJoC;AAAA,MAKvBC,IALuB,GAUlCL,KAVkC,CAKpCM,WALoC;AAAA,MAMpCC,QANoC,GAUlCP,KAVkC,CAMpCO,QANoC;AAAA,MAOpCC,SAPoC,GAUlCR,KAVkC,CAOpCQ,SAPoC;AAAA,MAQpCC,gBARoC,GAUlCT,KAVkC,CAQpCS,gBARoC;AAAA,MASpCC,qBAToC,GAUlCV,KAVkC,CASpCU,qBAToC;AAatC,MAAMC,aAAa,GAAGT,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAH,GAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhE;AACA,MAAIU,EAAE,GAAGL,QAAT;;AACA,MAAI,CAACK,EAAL,EAAS;AACPA,IAAAA,EAAE,GAAGV,eAAe,GAAEJ,KAAK,CAACe,YAAR,GAAuBf,KAAK,CAACgB,QAAjD;AACD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACb,MAAM,CAACQ,gBAAR,EAA0BA,gBAA1B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIG,EAAE,CAACG,GAAH,CAAO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrB,QAAMC,kBAAkB,GAAG,CAACjB,MAAM,CAACkB,SAAR,EAAmBX,SAAnB,CAA3B;AACA,QAAIY,qBAAqB,GAAG,EAA5B;;AACA,QAAIV,qBAAqB,YAAYW,QAArC,EAA+C;AAC7C,UAAMC,SAAS,GAAGX,aAAa,CAACM,GAAD,CAA/B;AACAG,MAAAA,qBAAqB,GAAGV,qBAAqB,CAAC;AAACY,QAAAA,SAAS,EAATA,SAAD;AAAYnB,QAAAA,KAAK,EAALA,KAAZ;AAAmBE,QAAAA,IAAI,EAAJA;AAAnB,OAAD,CAArB,IAAmD,EAA3E;AACAa,MAAAA,kBAAkB,CAACK,IAAnB,CAAwBH,qBAAqB,CAACZ,SAA9C;AACD;;AACD,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEY,qBAAqB,CAACI,KAAnC;AAA0C,MAAA,GAAG,EAAEP,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,GADH,CADF,CADF;AAOD,GAfC,CADJ,CADF;AAqBD;AAEDjB,QAAQ,CAAC0B,SAAT,GAAqB;AACnBvB,EAAAA,eAAe,EAAEL,SAAS,CAAC6B,IADR;AAEnBnB,EAAAA,QAAQ,EAAEV,SAAS,CAAC8B,KAFD;AAGnBjB,EAAAA,qBAAqB,EAAEb,SAAS,CAAC+B;AAHd,CAArB","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport { Utils } from './Utils';\r\n\r\nexport default function Weekdays(props) {\r\n  const {\r\n    styles,\r\n    startFromMonday,\r\n    currentMonth: month,\r\n    currentYear: year,\r\n    weekdays,\r\n    textStyle,\r\n    dayLabelsWrapper,\r\n    customDayHeaderStyles,\r\n  } = props;\r\n\r\n  // dayOfWeekNums: ISO week day numbers\r\n  const dayOfWeekNums = startFromMonday ? [1, 2, 3, 4, 5, 6, 7] : [7, 1, 2, 3, 4, 5, 6];\r\n  let wd = weekdays;\r\n  if (!wd) {\r\n    wd = startFromMonday? Utils.WEEKDAYS_MON : Utils.WEEKDAYS; // English Week days Array\r\n  }\r\n\r\n  return (\r\n    <View style={[styles.dayLabelsWrapper, dayLabelsWrapper]}>\r\n      { wd.map((day, key) => {\r\n        const dayOfWeekTextStyle = [styles.dayLabels, textStyle];\r\n        let customDayOfWeekStyles = {};\r\n        if (customDayHeaderStyles instanceof Function) {\r\n          const dayOfWeek = dayOfWeekNums[key];\r\n          customDayOfWeekStyles = customDayHeaderStyles({dayOfWeek, month, year}) || {};\r\n          dayOfWeekTextStyle.push(customDayOfWeekStyles.textStyle);\r\n        }\r\n        return (\r\n          <View style={customDayOfWeekStyles.style} key={key}>\r\n            <Text style={dayOfWeekTextStyle}>\r\n              {day}\r\n            </Text>\r\n          </View>\r\n        );\r\n      })\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nWeekdays.propTypes = {\r\n  startFromMonday: PropTypes.bool,\r\n  weekdays: PropTypes.array,\r\n  customDayHeaderStyles: PropTypes.func,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}