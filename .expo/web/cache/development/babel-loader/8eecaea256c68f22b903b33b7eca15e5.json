{"ast":null,"code":"import { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, handlers, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\n\nfunction logUnknownEvent(type) {\n  console.error(\"`\".concat(type, \"` is not a valid react-native-localize event\"));\n}\n\nfunction getPartialTag(_ref) {\n  var languageCode = _ref.languageCode,\n      scriptCode = _ref.scriptCode;\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\nexport function removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\nexport function findBestAvailableLanguage(languageTags) {\n  var locales = getLocales();\n\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n        languageCode = currentLocale.languageCode,\n        isRTL = currentLocale.isRTL;\n\n    if (languageTags.includes(languageTag)) {\n      return {\n        languageTag: languageTag,\n        isRTL: isRTL\n      };\n    }\n\n    var partial = getPartialTag(currentLocale);\n    var next = locales[i + 1];\n\n    if ((!next || partial !== getPartialTag(next)) && languageTags.includes(partial)) {\n      return {\n        languageTag: partial,\n        isRTL: isRTL\n      };\n    }\n\n    if ((!next || languageCode !== next.languageCode) && languageTags.includes(languageCode)) {\n      return {\n        languageTag: languageCode,\n        isRTL: isRTL\n      };\n    }\n  }\n}\nexport * from \"./types\";\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nexport default {\n  getCalendar: getCalendar,\n  getCountry: getCountry,\n  getCurrencies: getCurrencies,\n  getLocales: getLocales,\n  getNumberFormatSettings: getNumberFormatSettings,\n  getTemperatureUnit: getTemperatureUnit,\n  getTimeZone: getTimeZone,\n  uses24HourClock: uses24HourClock,\n  usesAutoDateAndTime: usesAutoDateAndTime,\n  usesAutoTimeZone: usesAutoTimeZone,\n  usesMetricSystem: usesMetricSystem,\n  findBestAvailableLanguage: findBestAvailableLanguage,\n  addEventListener: addEventListener,\n  removeEventListener: removeEventListener\n};","map":{"version":3,"sources":["index.ts"],"names":["console","scriptCode","languageCode","type","logUnknownEvent","handlers","locales","getLocales","i","currentLocale","isRTL","languageTags","languageTag","partial","getPartialTag","next","getCalendar","getCountry","getCurrencies","getNumberFormatSettings","getTemperatureUnit","getTimeZone","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem","findBestAvailableLanguage","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  handlers,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nimport { Locale, LocalizationEvent } from \"./types\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\n\nfunction getPartialTag({ languageCode, scriptCode }: Locale) {\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, isRTL } = currentLocale;\n\n    if (languageTags.includes(languageTag as T)) {\n      return { languageTag: languageTag as T, isRTL };\n    }\n\n    const partial = getPartialTag(currentLocale);\n    const next = locales[i + 1];\n\n    if (\n      (!next || partial !== getPartialTag(next)) &&\n      languageTags.includes(partial as T)\n    ) {\n      return { languageTag: partial as T, isRTL };\n    }\n\n    if (\n      (!next || languageCode !== next.languageCode) &&\n      languageTags.includes(languageCode as T)\n    ) {\n      return { languageTag: languageCode as T, isRTL };\n    }\n  }\n}\n\nexport * from \"./types\";\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\n\nexport default {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n};\n"]},"metadata":{},"sourceType":"module"}