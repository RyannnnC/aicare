{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Github\\\\aicare\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { makeStyles } from \"./makeStyles\";\nimport { Utils } from \"./Utils\";\nimport HeaderControls from \"./HeaderControls\";\nimport Weekdays from \"./Weekdays\";\nimport DaysGridView from \"./DaysGridView\";\nimport MonthSelector from \"./MonthSelector\";\nimport YearSelector from \"./YearSelector\";\nimport Scroller from \"./Scroller\";\nimport moment from 'moment';\n\nvar CalendarPicker = function (_Component) {\n  _inherits(CalendarPicker, _Component);\n\n  var _super = _createSuper(CalendarPicker);\n\n  function CalendarPicker(_props) {\n    var _this;\n\n    _classCallCheck(this, CalendarPicker);\n\n    _this = _super.call(this, _props);\n\n    _this.updateScaledStyles = function (props) {\n      var scaleFactor = props.scaleFactor,\n          selectedDayColor = props.selectedDayColor,\n          selectedDayTextColor = props.selectedDayTextColor,\n          todayBackgroundColor = props.todayBackgroundColor,\n          width = props.width,\n          height = props.height,\n          dayShape = props.dayShape;\n      var containerWidth = width ? width : Dimensions.get('window').width;\n      var containerHeight = height ? height : Dimensions.get('window').height;\n      return {\n        styles: makeStyles({\n          containerWidth: containerWidth,\n          containerHeight: containerHeight,\n          scaleFactor: scaleFactor,\n          selectedDayColor: selectedDayColor,\n          selectedDayTextColor: selectedDayTextColor,\n          todayBackgroundColor: todayBackgroundColor,\n          dayShape: dayShape\n        })\n      };\n    };\n\n    _this.updateMonthYear = function () {\n      var initialDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.initialDate;\n      var updateState = arguments.length > 1 ? arguments[1] : undefined;\n      var newState = {\n        currentMonth: parseInt(moment(initialDate).month()),\n        currentYear: parseInt(moment(initialDate).year())\n      };\n\n      if (updateState) {\n        _this.setState(newState);\n      }\n\n      return newState;\n    };\n\n    _this.updateDisabledDates = function () {\n      var _disabledDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var disabledDates = [];\n\n      if (_disabledDates) {\n        if (Array.isArray(_disabledDates)) {\n          _disabledDates.map(function (date) {\n            var thisDate = moment(date);\n            thisDate.set({\n              hour: 12,\n              minute: 0,\n              second: 0,\n              millisecond: 0\n            });\n            disabledDates.push(thisDate.valueOf());\n          });\n        } else if (_disabledDates instanceof Function) {\n          disabledDates = _disabledDates;\n        }\n      }\n\n      return {\n        disabledDates: disabledDates\n      };\n    };\n\n    _this.updateMinMaxRanges = function (_minRangeDuration, _maxRangeDuration) {\n      var minRangeDuration = [];\n      var maxRangeDuration = [];\n\n      if (_minRangeDuration) {\n        if (Array.isArray(_minRangeDuration)) {\n          _minRangeDuration.map(function (mrd) {\n            var thisDate = moment(mrd.date);\n            thisDate.set({\n              hour: 12,\n              minute: 0,\n              second: 0,\n              millisecond: 0\n            });\n            minRangeDuration.push({\n              date: thisDate.valueOf(),\n              minDuration: mrd.minDuration\n            });\n          });\n        } else {\n          minRangeDuration = _minRangeDuration;\n        }\n      }\n\n      if (_maxRangeDuration) {\n        if (Array.isArray(_maxRangeDuration)) {\n          _maxRangeDuration.map(function (mrd) {\n            var thisDate = moment(mrd.date);\n            thisDate.set({\n              hour: 12,\n              minute: 0,\n              second: 0,\n              millisecond: 0\n            });\n            maxRangeDuration.push({\n              date: thisDate.valueOf(),\n              maxDuration: mrd.maxDuration\n            });\n          });\n        } else {\n          maxRangeDuration = _maxRangeDuration;\n        }\n      }\n\n      return {\n        minRangeDuration: minRangeDuration,\n        maxRangeDuration: maxRangeDuration\n      };\n    };\n\n    _this.handleOnPressDay = function (_ref) {\n      var year = _ref.year,\n          month = _ref.month,\n          day = _ref.day;\n      var _this$state = _this.state,\n          prevSelectedStartDate = _this$state.selectedStartDate,\n          prevSelectedEndDate = _this$state.selectedEndDate;\n      var _this$props = _this.props,\n          allowRangeSelection = _this$props.allowRangeSelection,\n          allowBackwardRangeSelect = _this$props.allowBackwardRangeSelect,\n          enableDateChange = _this$props.enableDateChange,\n          onDateChange = _this$props.onDateChange;\n\n      if (!enableDateChange) {\n        return;\n      }\n\n      var date = moment({\n        year: year,\n        month: month,\n        day: day,\n        hour: 12\n      });\n\n      if (allowRangeSelection && prevSelectedStartDate && !prevSelectedEndDate) {\n        if (date.isSameOrAfter(prevSelectedStartDate, 'day')) {\n          var selectedStartDate = prevSelectedStartDate;\n          var selectedEndDate = date;\n\n          _this.setState({\n            selectedEndDate: selectedEndDate,\n            renderMonthParams: _this.createMonthProps(_objectSpread(_objectSpread({}, _this.state), {}, {\n              selectedStartDate: selectedStartDate,\n              selectedEndDate: selectedEndDate\n            }))\n          });\n\n          onDateChange(date, Utils.END_DATE);\n        } else if (allowBackwardRangeSelect) {\n          var _selectedEndDate = prevSelectedStartDate.clone();\n\n          var _selectedStartDate = date;\n\n          _this.setState({\n            selectedStartDate: _selectedStartDate,\n            selectedEndDate: _selectedEndDate,\n            renderMonthParams: _this.createMonthProps(_objectSpread(_objectSpread({}, _this.state), {}, {\n              selectedStartDate: _selectedStartDate,\n              selectedEndDate: _selectedEndDate\n            }))\n          }, function () {\n            onDateChange(_this.state.selectedStartDate, Utils.START_DATE);\n            onDateChange(_this.state.selectedEndDate, Utils.END_DATE);\n          });\n        }\n      } else {\n        var syncEndDate = !!prevSelectedEndDate;\n        var _selectedStartDate2 = date;\n        var _selectedEndDate2 = null;\n\n        _this.setState({\n          selectedStartDate: _selectedStartDate2,\n          selectedEndDate: _selectedEndDate2,\n          renderMonthParams: _this.createMonthProps(_objectSpread(_objectSpread({}, _this.state), {}, {\n            selectedStartDate: _selectedStartDate2,\n            selectedEndDate: _selectedEndDate2\n          }))\n        }, function () {\n          onDateChange(_this.state.selectedStartDate, Utils.START_DATE);\n\n          if (syncEndDate) {\n            onDateChange(null, Utils.END_DATE);\n          }\n        });\n      }\n    };\n\n    _this.handleOnPressPrevious = function () {\n      var _this$state2 = _this.state,\n          currentMonth = _this$state2.currentMonth,\n          currentYear = _this$state2.currentYear;\n      var previousMonth = currentMonth - 1;\n      var year = currentYear;\n\n      if (previousMonth < 0) {\n        previousMonth = 11;\n        year--;\n      }\n\n      var scrollFinisher = _this.props.scrollable && _this.scroller.scrollLeft;\n\n      _this.handleOnPressFinisher({\n        year: year,\n        month: previousMonth,\n        scrollFinisher: scrollFinisher\n      });\n    };\n\n    _this.handleOnPressNext = function () {\n      var _this$state3 = _this.state,\n          currentMonth = _this$state3.currentMonth,\n          currentYear = _this$state3.currentYear;\n      var nextMonth = currentMonth + 1;\n      var year = currentYear;\n\n      if (nextMonth > 11) {\n        nextMonth = 0;\n        year++;\n      }\n\n      var scrollFinisher = _this.props.scrollable && _this.scroller.scrollRight;\n\n      _this.handleOnPressFinisher({\n        year: year,\n        month: nextMonth,\n        scrollFinisher: scrollFinisher\n      });\n    };\n\n    _this.handleOnPressFinisher = function (_ref2) {\n      var year = _ref2.year,\n          month = _ref2.month,\n          scrollFinisher = _ref2.scrollFinisher,\n          extraState = _ref2.extraState;\n\n      if (scrollFinisher) {\n        scrollFinisher();\n      } else {\n        var currentMonth = parseInt(month);\n        var currentYear = parseInt(year);\n        var renderMonthParams = extraState || {\n          renderMonthParams: _objectSpread(_objectSpread({}, _this.state.renderMonthParams), {}, {\n            month: month,\n            year: year\n          })\n        };\n\n        _this.setState(_objectSpread({\n          currentMonth: currentMonth,\n          currentYear: currentYear\n        }, renderMonthParams));\n      }\n\n      var currentMonthYear = moment({\n        year: year,\n        month: month,\n        hour: 12\n      });\n      _this.props.onMonthChange && _this.props.onMonthChange(currentMonthYear);\n    };\n\n    _this.handleOnPressYear = function () {\n      _this.setState({\n        currentView: 'years'\n      });\n    };\n\n    _this.handleOnPressMonth = function () {\n      _this.setState({\n        currentView: 'months'\n      });\n    };\n\n    _this.handleOnSelectMonthYear = function (_ref3) {\n      var month = _ref3.month,\n          year = _ref3.year;\n      var currentYear = year;\n      var currentMonth = month;\n      var scrollableState = _this.props.scrollable ? _objectSpread({}, _this.createMonths(_this.props, {\n        currentYear: currentYear,\n        currentMonth: currentMonth\n      })) : {};\n\n      var extraState = _objectSpread({\n        renderMonthParams: _objectSpread(_objectSpread({}, _this.state.renderMonthParams), {}, {\n          month: month,\n          year: year\n        }),\n        currentView: 'days'\n      }, scrollableState);\n\n      _this.handleOnPressFinisher({\n        month: month,\n        year: year,\n        extraState: extraState\n      });\n    };\n\n    _this.resetSelections = function () {\n      _this.setState({\n        selectedStartDate: null,\n        selectedEndDate: null\n      });\n    };\n\n    _this.createMonthProps = function (state) {\n      return {\n        onPressDay: _this.handleOnPressDay,\n        month: state.currentMonth,\n        year: state.currentYear,\n        styles: state.styles,\n        disabledDates: state.disabledDates,\n        minDate: state.minDate,\n        maxDate: state.maxDate,\n        minRangeDuration: state.minRangeDuration,\n        maxRangeDuration: state.maxRangeDuration,\n        selectedStartDate: state.selectedStartDate,\n        selectedEndDate: state.selectedEndDate,\n        enableDateChange: _this.props.enableDateChange,\n        startFromMonday: _this.props.startFromMonday,\n        allowRangeSelection: _this.props.allowRangeSelection,\n        allowBackwardRangeSelect: _this.props.allowBackwardRangeSelect,\n        showDayStragglers: _this.props.showDayStragglers,\n        disabledDatesTextStyle: _this.props.disabledDatesTextStyle,\n        textStyle: _this.props.textStyle,\n        todayTextStyle: _this.props.todayTextStyle,\n        selectedDayTextStyle: _this.props.selectedDayTextStyle,\n        selectedRangeStartTextStyle: _this.props.selectedRangeStartTextStyle,\n        selectedRangeEndTextStyle: _this.props.selectedRangeEndTextStyle,\n        selectedDayStyle: _this.props.selectedDayStyle,\n        selectedDisabledDatesTextStyle: _this.props.selectedDisabledDatesTextStyle,\n        selectedRangeStartStyle: _this.props.selectedRangeStartStyle,\n        selectedRangeStyle: _this.props.selectedRangeStyle,\n        selectedRangeEndStyle: _this.props.selectedRangeEndStyle,\n        customDatesStyles: _this.props.customDatesStyles\n      };\n    };\n\n    _this.createMonths = function (props, _ref4) {\n      var currentMonth = _ref4.currentMonth,\n          currentYear = _ref4.currentYear;\n\n      if (!props.scrollable) {\n        return [];\n      }\n\n      var initialDate = props.initialDate,\n          minDate = props.minDate,\n          maxDate = props.maxDate,\n          restrictMonthNavigation = props.restrictMonthNavigation;\n      var monthsList = [];\n      var numMonths = _this.numMonthsScroll;\n      var initialScrollerIndex = 0;\n\n      var _initialDate = Number.isInteger(currentMonth) && Number.isInteger(currentYear) && moment({\n        year: currentYear,\n        month: currentMonth,\n        hour: 12\n      });\n\n      _initialDate = _initialDate || initialDate;\n\n      var firstScrollerMonth = _initialDate.clone().subtract(numMonths / 2, 'months');\n\n      if (minDate && restrictMonthNavigation && firstScrollerMonth.isBefore(minDate, 'month')) {\n        firstScrollerMonth = moment(minDate);\n      }\n\n      for (var i = 0; i < numMonths; i++) {\n        var month = firstScrollerMonth.clone().add(i, 'months');\n\n        if (maxDate && restrictMonthNavigation && month.isAfter(maxDate, 'month')) {\n          break;\n        }\n\n        if (month.isSame(_initialDate, 'month')) {\n          initialScrollerIndex = i;\n        }\n\n        monthsList.push(month);\n      }\n\n      return {\n        monthsList: monthsList,\n        initialScrollerIndex: initialScrollerIndex\n      };\n    };\n\n    _this.numMonthsScroll = 60;\n    _this.state = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      currentMonth: null,\n      currentYear: null,\n      currentView: 'days',\n      selectedStartDate: _props.selectedStartDate && moment(_props.selectedStartDate),\n      selectedEndDate: _props.selectedEndDate && moment(_props.selectedEndDate),\n      minDate: _props.minDate && moment(_props.minDate),\n      maxDate: _props.maxDate && moment(_props.maxDate),\n      styles: {}\n    }, _this.updateScaledStyles(_props)), _this.updateMonthYear(_props.initialDate)), _this.updateDisabledDates(_props.disabledDates)), _this.updateMinMaxRanges(_props.minRangeDuration, _props.maxRangeDuration)), _this.createMonths(_props, {}));\n    _this.state.renderMonthParams = _this.createMonthProps(_this.state);\n    return _this;\n  }\n\n  _createClass(CalendarPicker, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var doStateUpdate = false;\n      var newStyles = {};\n\n      if (prevProps.width !== this.props.width || prevProps.height !== this.props.height) {\n        newStyles = this.updateScaledStyles(this.props);\n        doStateUpdate = true;\n      }\n\n      var newMonthYear = {};\n\n      if (!moment(prevProps.initialDate).isSame(this.props.initialDate, 'day')) {\n        newMonthYear = this.updateMonthYear(this.props.initialDate);\n        doStateUpdate = true;\n      }\n\n      var selectedDateRanges = {};\n      var _this$props2 = this.props,\n          selectedStartDate = _this$props2.selectedStartDate,\n          selectedEndDate = _this$props2.selectedEndDate;\n\n      if (selectedStartDate !== prevProps.selectedStartDate || selectedEndDate !== prevProps.selectedEndDate) {\n        selectedDateRanges = {\n          selectedStartDate: selectedStartDate && moment(selectedStartDate),\n          selectedEndDate: selectedEndDate && moment(selectedEndDate)\n        };\n        doStateUpdate = true;\n      }\n\n      var disabledDates = {};\n\n      if (prevProps.disabledDates !== this.props.disabledDates) {\n        disabledDates = this.updateDisabledDates(this.props.disabledDates);\n        doStateUpdate = true;\n      }\n\n      var rangeDurations = {};\n\n      if (prevProps.minRangeDuration !== this.props.minRangeDuration || prevProps.maxRangeDuration !== this.props.maxRangeDuration) {\n        var _this$props3 = this.props,\n            minRangeDuration = _this$props3.minRangeDuration,\n            maxRangeDuration = _this$props3.maxRangeDuration;\n        rangeDurations = this.updateMinMaxRanges(minRangeDuration, maxRangeDuration);\n        doStateUpdate = true;\n      }\n\n      var minMaxDates = {};\n\n      if (prevProps.minDate !== this.props.minDate || prevProps.minDate !== this.props.minDate) {\n        minMaxDates.minDate = this.props.minDate && moment(this.props.minDate);\n        minMaxDates.maxDate = this.props.maxDate && moment(this.props.maxDate);\n      }\n\n      if (doStateUpdate) {\n        var newState = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, newStyles), newMonthYear), selectedDateRanges), disabledDates), rangeDurations), minMaxDates);\n\n        var renderMonthParams = {};\n\n        var _state = _objectSpread(_objectSpread({}, this.state), newState);\n\n        renderMonthParams = this.createMonthProps(_state);\n        this.setState(_objectSpread(_objectSpread({}, newState), {}, {\n          renderMonthParams: renderMonthParams\n        }));\n      }\n    }\n  }, {\n    key: \"renderMonth\",\n    value: function renderMonth(props) {\n      return React.createElement(DaysGridView, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state4 = this.state,\n          currentView = _this$state4.currentView,\n          currentMonth = _this$state4.currentMonth,\n          currentYear = _this$state4.currentYear,\n          minDate = _this$state4.minDate,\n          maxDate = _this$state4.maxDate,\n          styles = _this$state4.styles,\n          monthsList = _this$state4.monthsList,\n          renderMonthParams = _this$state4.renderMonthParams,\n          initialScrollerIndex = _this$state4.initialScrollerIndex;\n      var _this$props4 = this.props,\n          startFromMonday = _this$props4.startFromMonday,\n          initialDate = _this$props4.initialDate,\n          weekdays = _this$props4.weekdays,\n          months = _this$props4.months,\n          previousComponent = _this$props4.previousComponent,\n          nextComponent = _this$props4.nextComponent,\n          previousTitle = _this$props4.previousTitle,\n          nextTitle = _this$props4.nextTitle,\n          previousTitleStyle = _this$props4.previousTitleStyle,\n          nextTitleStyle = _this$props4.nextTitleStyle,\n          textStyle = _this$props4.textStyle,\n          restrictMonthNavigation = _this$props4.restrictMonthNavigation,\n          headingLevel = _this$props4.headingLevel,\n          dayLabelsWrapper = _this$props4.dayLabelsWrapper,\n          customDayHeaderStyles = _this$props4.customDayHeaderStyles,\n          selectMonthTitle = _this$props4.selectMonthTitle,\n          selectYearTitle = _this$props4.selectYearTitle,\n          monthYearHeaderWrapperStyle = _this$props4.monthYearHeaderWrapperStyle,\n          headerWrapperStyle = _this$props4.headerWrapperStyle,\n          onMonthChange = _this$props4.onMonthChange,\n          scrollable = _this$props4.scrollable,\n          horizontal = _this$props4.horizontal;\n      var content;\n\n      switch (currentView) {\n        case 'months':\n          content = React.createElement(MonthSelector, {\n            styles: styles,\n            textStyle: textStyle,\n            title: selectMonthTitle,\n            currentYear: currentYear,\n            months: months,\n            minDate: minDate,\n            maxDate: maxDate,\n            onSelectMonth: this.handleOnSelectMonthYear,\n            headingLevel: headingLevel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 9\n            }\n          });\n          break;\n\n        case 'years':\n          content = React.createElement(YearSelector, {\n            styles: styles,\n            textStyle: textStyle,\n            title: selectYearTitle,\n            initialDate: moment(initialDate),\n            currentMonth: currentMonth,\n            currentYear: currentYear,\n            minDate: minDate,\n            maxDate: maxDate,\n            restrictNavigation: restrictMonthNavigation,\n            previousComponent: previousComponent,\n            nextComponent: nextComponent,\n            previousTitle: previousTitle,\n            nextTitle: nextTitle,\n            previousTitleStyle: previousTitleStyle,\n            nextTitleStyle: nextTitleStyle,\n            onSelectYear: this.handleOnSelectMonthYear,\n            headingLevel: headingLevel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 9\n            }\n          });\n          break;\n\n        default:\n          content = React.createElement(View, {\n            styles: styles.calendar,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 9\n            }\n          }, React.createElement(HeaderControls, {\n            styles: styles,\n            currentMonth: currentMonth,\n            currentYear: currentYear,\n            initialDate: moment(initialDate),\n            onPressPrevious: this.handleOnPressPrevious,\n            onPressNext: this.handleOnPressNext,\n            onPressMonth: this.handleOnPressMonth,\n            onPressYear: this.handleOnPressYear,\n            months: months,\n            previousComponent: previousComponent,\n            nextComponent: nextComponent,\n            previousTitle: previousTitle,\n            nextTitle: nextTitle,\n            previousTitleStyle: previousTitleStyle,\n            nextTitleStyle: nextTitleStyle,\n            textStyle: textStyle,\n            restrictMonthNavigation: restrictMonthNavigation,\n            minDate: minDate,\n            maxDate: maxDate,\n            headingLevel: headingLevel,\n            monthYearHeaderWrapperStyle: monthYearHeaderWrapperStyle,\n            headerWrapperStyle: headerWrapperStyle,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 11\n            }\n          }), React.createElement(Weekdays, {\n            styles: styles,\n            startFromMonday: startFromMonday,\n            currentMonth: currentMonth,\n            currentYear: currentYear,\n            weekdays: weekdays,\n            textStyle: textStyle,\n            dayLabelsWrapper: dayLabelsWrapper,\n            customDayHeaderStyles: customDayHeaderStyles,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 11\n            }\n          }), scrollable ? React.createElement(Scroller, {\n            ref: function ref(scroller) {\n              return _this2.scroller = scroller;\n            },\n            data: monthsList,\n            renderMonth: this.renderMonth,\n            renderMonthParams: renderMonthParams,\n            maxSimultaneousMonths: this.numMonthsScroll,\n            initialRenderIndex: initialScrollerIndex,\n            minDate: minDate,\n            maxDate: maxDate,\n            restrictMonthNavigation: restrictMonthNavigation,\n            updateMonthYear: this.updateMonthYear,\n            onMonthChange: onMonthChange,\n            horizontal: horizontal,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 13\n            }\n          }) : this.renderMonth(renderMonthParams));\n      }\n\n      return content;\n    }\n  }]);\n\n  return CalendarPicker;\n}(Component);\n\nCalendarPicker.defaultProps = {\n  initialDate: moment(),\n  scaleFactor: 375,\n  scrollable: false,\n  onDateChange: function onDateChange() {\n    console.log('onDateChange() not provided');\n  },\n  enableDateChange: true,\n  headingLevel: 1,\n  sundayColor: '#FFFFFF',\n  customDatesStyles: [],\n  previousTitle: 'Previous',\n  nextTitle: 'Next',\n  selectMonthTitle: 'Select Month in ',\n  selectYearTitle: 'Select Year',\n  horizontal: true,\n  selectedDayStyle: null,\n  selectedRangeStartStyle: null,\n  selectedRangeEndStyle: null,\n  selectedRangeStyle: null\n};\nexport { CalendarPicker as default };","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-calendar-picker/CalendarPicker/index.js"],"names":["React","Component","makeStyles","Utils","HeaderControls","Weekdays","DaysGridView","MonthSelector","YearSelector","Scroller","moment","CalendarPicker","props","updateScaledStyles","scaleFactor","selectedDayColor","selectedDayTextColor","todayBackgroundColor","width","height","dayShape","containerWidth","Dimensions","get","containerHeight","styles","updateMonthYear","initialDate","updateState","newState","currentMonth","parseInt","month","currentYear","year","setState","updateDisabledDates","_disabledDates","disabledDates","Array","isArray","map","date","thisDate","set","hour","minute","second","millisecond","push","valueOf","Function","updateMinMaxRanges","_minRangeDuration","_maxRangeDuration","minRangeDuration","maxRangeDuration","mrd","minDuration","maxDuration","handleOnPressDay","day","state","prevSelectedStartDate","selectedStartDate","prevSelectedEndDate","selectedEndDate","allowRangeSelection","allowBackwardRangeSelect","enableDateChange","onDateChange","isSameOrAfter","renderMonthParams","createMonthProps","END_DATE","clone","START_DATE","syncEndDate","handleOnPressPrevious","previousMonth","scrollFinisher","scrollable","scroller","scrollLeft","handleOnPressFinisher","handleOnPressNext","nextMonth","scrollRight","extraState","currentMonthYear","onMonthChange","handleOnPressYear","currentView","handleOnPressMonth","handleOnSelectMonthYear","scrollableState","createMonths","resetSelections","onPressDay","minDate","maxDate","startFromMonday","showDayStragglers","disabledDatesTextStyle","textStyle","todayTextStyle","selectedDayTextStyle","selectedRangeStartTextStyle","selectedRangeEndTextStyle","selectedDayStyle","selectedDisabledDatesTextStyle","selectedRangeStartStyle","selectedRangeStyle","selectedRangeEndStyle","customDatesStyles","restrictMonthNavigation","monthsList","numMonths","numMonthsScroll","initialScrollerIndex","_initialDate","Number","isInteger","firstScrollerMonth","subtract","isBefore","i","add","isAfter","isSame","prevProps","doStateUpdate","newStyles","newMonthYear","selectedDateRanges","rangeDurations","minMaxDates","_state","weekdays","months","previousComponent","nextComponent","previousTitle","nextTitle","previousTitleStyle","nextTitleStyle","headingLevel","dayLabelsWrapper","customDayHeaderStyles","selectMonthTitle","selectYearTitle","monthYearHeaderWrapperStyle","headerWrapperStyle","horizontal","content","calendar","renderMonth","defaultProps","console","log","sundayColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Dimensions } from 'react-native';\r\nimport { makeStyles } from './makeStyles';\r\nimport { Utils } from './Utils';\r\nimport HeaderControls from './HeaderControls';\r\nimport Weekdays from './Weekdays';\r\nimport DaysGridView from './DaysGridView';\r\nimport MonthSelector from './MonthSelector';\r\nimport YearSelector from './YearSelector';\r\nimport Scroller from './Scroller';\r\nimport moment from 'moment';\r\n\r\nexport default class CalendarPicker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.numMonthsScroll = 60; // 5 years\r\n    this.state = {\r\n      currentMonth: null,\r\n      currentYear: null,\r\n      currentView: 'days',\r\n      selectedStartDate: props.selectedStartDate && moment(props.selectedStartDate),\r\n      selectedEndDate: props.selectedEndDate && moment(props.selectedEndDate),\r\n      minDate: props.minDate && moment(props.minDate),\r\n      maxDate: props.maxDate && moment(props.maxDate),\r\n      styles: {},\r\n      ...this.updateScaledStyles(props),\r\n      ...this.updateMonthYear(props.initialDate),\r\n      ...this.updateDisabledDates(props.disabledDates),\r\n      ...this.updateMinMaxRanges(props.minRangeDuration, props.maxRangeDuration),\r\n      ...this.createMonths(props, {}),\r\n    };\r\n    this.state.renderMonthParams = this.createMonthProps(this.state);\r\n  }\r\n\r\n  static defaultProps = {\r\n    initialDate: moment(),\r\n    scaleFactor: 375,\r\n    scrollable: false,\r\n    onDateChange: () => {\r\n      console.log('onDateChange() not provided');\r\n    },\r\n    enableDateChange: true,\r\n    headingLevel: 1,\r\n    sundayColor: '#FFFFFF',\r\n    customDatesStyles: [],\r\n    previousTitle: 'Previous',\r\n    nextTitle: 'Next',\r\n    selectMonthTitle: 'Select Month in ',\r\n    selectYearTitle: 'Select Year',\r\n    horizontal: true,\r\n    selectedDayStyle : null,\r\n    selectedRangeStartStyle: null,\r\n    selectedRangeEndStyle: null,\r\n    selectedRangeStyle: null,\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let doStateUpdate = false;\r\n\r\n    let newStyles = {};\r\n    if (\r\n      prevProps.width !== this.props.width ||\r\n      prevProps.height !== this.props.height\r\n    ) {\r\n      newStyles = this.updateScaledStyles(this.props);\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let newMonthYear = {};\r\n    if (!moment(prevProps.initialDate).isSame(this.props.initialDate, 'day')) {\r\n      newMonthYear = this.updateMonthYear(this.props.initialDate);\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let selectedDateRanges = {};\r\n    const { selectedStartDate, selectedEndDate } = this.props;\r\n    if (selectedStartDate !== prevProps.selectedStartDate ||\r\n        selectedEndDate !== prevProps.selectedEndDate\r\n    ) {\r\n      selectedDateRanges = {\r\n        selectedStartDate: selectedStartDate && moment(selectedStartDate),\r\n        selectedEndDate: selectedEndDate && moment(selectedEndDate)\r\n      };\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let disabledDates = {};\r\n    if (prevProps.disabledDates !== this.props.disabledDates) {\r\n      disabledDates = this.updateDisabledDates(this.props.disabledDates);\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let rangeDurations = {};\r\n    if (prevProps.minRangeDuration !== this.props.minRangeDuration ||\r\n        prevProps.maxRangeDuration !== this.props.maxRangeDuration\r\n    ) {\r\n      const {minRangeDuration, maxRangeDuration} = this.props;\r\n      rangeDurations = this.updateMinMaxRanges(minRangeDuration, maxRangeDuration);\r\n      doStateUpdate = true;\r\n    }\r\n\r\n    let minMaxDates = {};\r\n    if (prevProps.minDate !== this.props.minDate ||\r\n        prevProps.minDate !== this.props.minDate\r\n    ) {\r\n      minMaxDates.minDate = this.props.minDate && moment(this.props.minDate);\r\n      minMaxDates.maxDate = this.props.maxDate && moment(this.props.maxDate);\r\n    }\r\n\r\n    if (doStateUpdate) {\r\n      const newState = {\r\n        ...newStyles,\r\n        ...newMonthYear,\r\n        ...selectedDateRanges,\r\n        ...disabledDates,\r\n        ...rangeDurations,\r\n        ...minMaxDates,\r\n      };\r\n      let renderMonthParams = {};\r\n      const _state = {...this.state, ...newState};\r\n      renderMonthParams = this.createMonthProps(_state);\r\n      this.setState({...newState, renderMonthParams});\r\n    }\r\n  }\r\n\r\n  updateScaledStyles = props => {\r\n    const {\r\n      scaleFactor,\r\n      selectedDayColor,\r\n      selectedDayTextColor,\r\n      todayBackgroundColor,\r\n      width,\r\n      height,\r\n      dayShape\r\n    } = props;\r\n\r\n    // The styles in makeStyles are intially scaled to this width\r\n    const containerWidth = width ? width : Dimensions.get('window').width;\r\n    const containerHeight = height ? height : Dimensions.get('window').height;\r\n    return {\r\n      styles: makeStyles({\r\n        containerWidth,\r\n        containerHeight,\r\n        scaleFactor,\r\n        selectedDayColor,\r\n        selectedDayTextColor,\r\n        todayBackgroundColor,\r\n        dayShape\r\n      })\r\n    };\r\n  }\r\n\r\n  updateMonthYear = (initialDate = this.props.initialDate, updateState) => {\r\n    const newState = {\r\n      currentMonth: parseInt(moment(initialDate).month()),\r\n      currentYear: parseInt(moment(initialDate).year())\r\n    };\r\n    if (updateState) {\r\n      this.setState(newState);\r\n    }\r\n    return newState;\r\n  }\r\n\r\n  updateDisabledDates = (_disabledDates = []) => {\r\n    let disabledDates = [];\r\n    if (_disabledDates) {\r\n      if (Array.isArray(_disabledDates)) {\r\n        // Convert input date into timestamp\r\n        _disabledDates.map(date => {\r\n          let thisDate = moment(date);\r\n          thisDate.set({ hour: 12, minute: 0, second: 0, millisecond: 0 });\r\n          disabledDates.push(thisDate.valueOf());\r\n        });\r\n      }\r\n      else if (_disabledDates instanceof Function) {\r\n        disabledDates = _disabledDates;\r\n      }\r\n    }\r\n    return { disabledDates };\r\n  }\r\n\r\n  updateMinMaxRanges = (_minRangeDuration, _maxRangeDuration) => {\r\n    let minRangeDuration = [];\r\n    let maxRangeDuration = [];\r\n\r\n    if (_minRangeDuration) {\r\n      if (Array.isArray(_minRangeDuration)) {\r\n        _minRangeDuration.map(mrd => {\r\n          let thisDate = moment(mrd.date);\r\n          thisDate.set({ hour: 12, minute: 0, second: 0, millisecond: 0 });\r\n          minRangeDuration.push({\r\n            date: thisDate.valueOf(),\r\n            minDuration: mrd.minDuration\r\n          });\r\n        });\r\n      } else {\r\n        minRangeDuration = _minRangeDuration;\r\n      }\r\n    }\r\n\r\n    if (_maxRangeDuration) {\r\n      if (Array.isArray(_maxRangeDuration)) {\r\n        _maxRangeDuration.map(mrd => {\r\n          let thisDate = moment(mrd.date);\r\n          thisDate.set({ hour: 12, minute: 0, second: 0, millisecond: 0 });\r\n          maxRangeDuration.push({\r\n            date: thisDate.valueOf(),\r\n            maxDuration: mrd.maxDuration\r\n          });\r\n        });\r\n      } else {\r\n        maxRangeDuration = _maxRangeDuration;\r\n      }\r\n    }\r\n    return {minRangeDuration, maxRangeDuration};\r\n  }\r\n\r\n  handleOnPressDay = ({year, month, day}) => {\r\n    const {\r\n      selectedStartDate: prevSelectedStartDate,\r\n      selectedEndDate: prevSelectedEndDate,\r\n    } = this.state;\r\n\r\n    const {\r\n      allowRangeSelection,\r\n      allowBackwardRangeSelect,\r\n      enableDateChange,\r\n      onDateChange,\r\n    } = this.props;\r\n\r\n    if (!enableDateChange) {\r\n      return;\r\n    }\r\n\r\n    const date = moment({ year, month, day, hour: 12 });\r\n\r\n    if (allowRangeSelection && prevSelectedStartDate && !prevSelectedEndDate) {\r\n      if (date.isSameOrAfter(prevSelectedStartDate, 'day')) {\r\n        const selectedStartDate = prevSelectedStartDate;\r\n        const selectedEndDate = date;\r\n        this.setState({\r\n          selectedEndDate,\r\n          renderMonthParams: this.createMonthProps({...this.state, selectedStartDate, selectedEndDate}),\r\n        });\r\n        // Sync end date with parent\r\n        onDateChange(date, Utils.END_DATE);\r\n      }\r\n      else if (allowBackwardRangeSelect) { // date is before selectedStartDate\r\n        // Flip dates so that start is always before end.\r\n        const selectedEndDate = prevSelectedStartDate.clone();\r\n        const selectedStartDate = date;\r\n        this.setState({\r\n          selectedStartDate,\r\n          selectedEndDate,\r\n          renderMonthParams: this.createMonthProps({...this.state, selectedStartDate, selectedEndDate}),\r\n        }, () => {\r\n          // Sync both start and end dates with parent *after* state update.\r\n          onDateChange(this.state.selectedStartDate, Utils.START_DATE);\r\n          onDateChange(this.state.selectedEndDate, Utils.END_DATE);\r\n        });\r\n      }\r\n    } else {\r\n      const syncEndDate = !!prevSelectedEndDate;\r\n      const selectedStartDate = date;\r\n      const selectedEndDate = null;\r\n      this.setState({\r\n        selectedStartDate,\r\n        selectedEndDate,\r\n        renderMonthParams: this.createMonthProps({...this.state, selectedStartDate, selectedEndDate}),\r\n      }, () => {\r\n        // Sync start date with parent *after* state update.\r\n        onDateChange(this.state.selectedStartDate, Utils.START_DATE);\r\n        if (syncEndDate) {\r\n          // sync end date with parent - must be cleared if previously set.\r\n          onDateChange(null, Utils.END_DATE);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOnPressPrevious = () => {\r\n    const { currentMonth, currentYear } = this.state;\r\n    let previousMonth = currentMonth - 1;\r\n    let year = currentYear;\r\n    // if previousMonth is negative it means the current month is January,\r\n    // so we have to go back to previous year and set the current month to December\r\n    if (previousMonth < 0) {\r\n      previousMonth = 11;\r\n      year--;\r\n    }\r\n    const scrollFinisher = this.props.scrollable && this.scroller.scrollLeft;\r\n    this.handleOnPressFinisher({year, month: previousMonth, scrollFinisher});\r\n  }\r\n\r\n  handleOnPressNext = () => {\r\n    const { currentMonth, currentYear } = this.state;\r\n    let nextMonth = currentMonth + 1;\r\n    let year = currentYear;\r\n    // if nextMonth is greater than 11 it means the current month is December,\r\n    // so we have to go forward to the next year and set the current month to January\r\n    if (nextMonth > 11) {\r\n      nextMonth = 0;\r\n      year++;\r\n    }\r\n    const scrollFinisher = this.props.scrollable && this.scroller.scrollRight;\r\n    this.handleOnPressFinisher({year, month: nextMonth, scrollFinisher});\r\n  }\r\n\r\n  handleOnPressFinisher = ({year, month, scrollFinisher, extraState}) => {\r\n    if (scrollFinisher) {\r\n      scrollFinisher();\r\n    }\r\n    else {\r\n      const currentMonth = parseInt(month);\r\n      const currentYear = parseInt(year);\r\n      const renderMonthParams = extraState || {\r\n        renderMonthParams: {...this.state.renderMonthParams, month, year}\r\n      };\r\n      this.setState({ currentMonth, currentYear, ...renderMonthParams });\r\n    }\r\n    const currentMonthYear = moment({year, month, hour: 12});\r\n    this.props.onMonthChange && this.props.onMonthChange(currentMonthYear);\r\n  }\r\n\r\n  handleOnPressYear = () => {\r\n    this.setState({\r\n      currentView: 'years'\r\n    });\r\n  }\r\n\r\n  handleOnPressMonth = () => {\r\n    this.setState({\r\n      currentView: 'months'\r\n    });\r\n  }\r\n\r\n  handleOnSelectMonthYear = ({month, year}) => {\r\n    const currentYear = year;\r\n    const currentMonth = month;\r\n    const scrollableState = this.props.scrollable ? {\r\n      ...this.createMonths(this.props, {currentYear, currentMonth}),\r\n    } : {};\r\n\r\n    const extraState = {\r\n      renderMonthParams: {...this.state.renderMonthParams, month, year},\r\n      currentView: 'days',\r\n      ...scrollableState,\r\n    };\r\n\r\n    this.handleOnPressFinisher({month, year, extraState});\r\n  }\r\n\r\n  resetSelections = () => {\r\n    this.setState({\r\n      selectedStartDate: null,\r\n      selectedEndDate: null\r\n    });\r\n  }\r\n\r\n  createMonthProps = state => {\r\n    return {\r\n      onPressDay: this.handleOnPressDay,\r\n      month: state.currentMonth,\r\n      year: state.currentYear,\r\n      styles: state.styles,\r\n      disabledDates: state.disabledDates,\r\n      minDate: state.minDate,\r\n      maxDate: state.maxDate,\r\n      minRangeDuration: state.minRangeDuration,\r\n      maxRangeDuration: state.maxRangeDuration,\r\n      selectedStartDate: state.selectedStartDate,\r\n      selectedEndDate: state.selectedEndDate,\r\n      enableDateChange: this.props.enableDateChange,\r\n      startFromMonday: this.props.startFromMonday,\r\n      allowRangeSelection: this.props.allowRangeSelection,\r\n      allowBackwardRangeSelect: this.props.allowBackwardRangeSelect,\r\n      showDayStragglers: this.props.showDayStragglers,\r\n      disabledDatesTextStyle: this.props.disabledDatesTextStyle,\r\n      textStyle: this.props.textStyle,\r\n      todayTextStyle: this.props.todayTextStyle,\r\n      selectedDayTextStyle: this.props.selectedDayTextStyle,\r\n      selectedRangeStartTextStyle: this.props.selectedRangeStartTextStyle,\r\n      selectedRangeEndTextStyle: this.props.selectedRangeEndTextStyle,\r\n      selectedDayStyle: this.props.selectedDayStyle,\r\n      selectedDisabledDatesTextStyle: this.props.selectedDisabledDatesTextStyle,\r\n      selectedRangeStartStyle: this.props.selectedRangeStartStyle,\r\n      selectedRangeStyle: this.props.selectedRangeStyle,\r\n      selectedRangeEndStyle: this.props.selectedRangeEndStyle,\r\n      customDatesStyles: this.props.customDatesStyles,\r\n    };\r\n  }\r\n\r\n  createMonths = (props, {currentMonth, currentYear}) => {\r\n    if (!props.scrollable) {\r\n      return [];\r\n    }\r\n\r\n    const {\r\n      initialDate,\r\n      minDate,\r\n      maxDate,\r\n      restrictMonthNavigation,\r\n    } = props;\r\n\r\n    let monthsList = [];\r\n    let numMonths = this.numMonthsScroll;\r\n    let initialScrollerIndex = 0;\r\n\r\n    // Center start month in scroller.  Visible month is either the initialDate\r\n    // prop, or the current month & year that has been selected.\r\n    let _initialDate = Number.isInteger(currentMonth) && Number.isInteger(currentYear) &&\r\n        moment({ year: currentYear, month: currentMonth, hour: 12 });\r\n    _initialDate = _initialDate || initialDate;\r\n    let firstScrollerMonth = _initialDate.clone().subtract(numMonths/2, 'months');\r\n    if (minDate && restrictMonthNavigation && firstScrollerMonth.isBefore(minDate, 'month')) {\r\n      firstScrollerMonth = moment(minDate);\r\n    }\r\n\r\n    for (let i = 0; i < numMonths; i++) {\r\n      let month = firstScrollerMonth.clone().add(i, 'months');\r\n      if (maxDate && restrictMonthNavigation && month.isAfter(maxDate, 'month')) {\r\n        break;\r\n      }\r\n      if (month.isSame(_initialDate, 'month')) {\r\n        initialScrollerIndex = i;\r\n      }\r\n      monthsList.push(month);\r\n    }\r\n\r\n    return {\r\n      monthsList,\r\n      initialScrollerIndex,\r\n    };\r\n  }\r\n\r\n  renderMonth(props) {\r\n    return (\r\n      <DaysGridView {...props} />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      currentView,\r\n      currentMonth,\r\n      currentYear,\r\n      minDate,\r\n      maxDate,\r\n      styles,\r\n      monthsList,\r\n      renderMonthParams,\r\n      initialScrollerIndex,\r\n    } = this.state;\r\n\r\n    const {\r\n      startFromMonday,\r\n      initialDate,\r\n      weekdays,\r\n      months,\r\n      previousComponent,\r\n      nextComponent,\r\n      previousTitle,\r\n      nextTitle,\r\n      previousTitleStyle,\r\n      nextTitleStyle,\r\n      textStyle,\r\n      restrictMonthNavigation,\r\n      headingLevel,\r\n      dayLabelsWrapper,\r\n      customDayHeaderStyles,\r\n      selectMonthTitle,\r\n      selectYearTitle,\r\n      monthYearHeaderWrapperStyle,\r\n      headerWrapperStyle,\r\n      onMonthChange,\r\n      scrollable,\r\n      horizontal,\r\n    } = this.props;\r\n\r\n    let content;\r\n    switch (currentView) {\r\n    case 'months':\r\n      content = (\r\n        <MonthSelector\r\n          styles={styles}\r\n          textStyle={textStyle}\r\n          title={selectMonthTitle}\r\n          currentYear={currentYear}\r\n          months={months}\r\n          minDate={minDate}\r\n          maxDate={maxDate}\r\n          onSelectMonth={this.handleOnSelectMonthYear}\r\n          headingLevel={headingLevel}\r\n        />\r\n      );\r\n      break;\r\n    case 'years':\r\n      content = (\r\n        <YearSelector\r\n          styles={styles}\r\n          textStyle={textStyle}\r\n          title={selectYearTitle}\r\n          initialDate={moment(initialDate)}\r\n          currentMonth={currentMonth}\r\n          currentYear={currentYear}\r\n          minDate={minDate}\r\n          maxDate={maxDate}\r\n          restrictNavigation={restrictMonthNavigation}\r\n          previousComponent={previousComponent}\r\n          nextComponent={nextComponent}\r\n          previousTitle={previousTitle}\r\n          nextTitle={nextTitle}\r\n          previousTitleStyle={previousTitleStyle}\r\n          nextTitleStyle={nextTitleStyle}\r\n          onSelectYear={this.handleOnSelectMonthYear}\r\n          headingLevel={headingLevel}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      content = (\r\n        <View styles={styles.calendar}>\r\n          <HeaderControls\r\n            styles={styles}\r\n            currentMonth={currentMonth}\r\n            currentYear={currentYear}\r\n            initialDate={moment(initialDate)}\r\n            onPressPrevious={this.handleOnPressPrevious}\r\n            onPressNext={this.handleOnPressNext}\r\n            onPressMonth={this.handleOnPressMonth}\r\n            onPressYear={this.handleOnPressYear}\r\n            months={months}\r\n            previousComponent={previousComponent}\r\n            nextComponent={nextComponent}\r\n            previousTitle={previousTitle}\r\n            nextTitle={nextTitle}\r\n            previousTitleStyle={previousTitleStyle}\r\n            nextTitleStyle={nextTitleStyle}\r\n            textStyle={textStyle}\r\n            restrictMonthNavigation={restrictMonthNavigation}\r\n            minDate={minDate}\r\n            maxDate={maxDate}\r\n            headingLevel={headingLevel}\r\n            monthYearHeaderWrapperStyle={monthYearHeaderWrapperStyle}\r\n            headerWrapperStyle={headerWrapperStyle}\r\n          />\r\n          <Weekdays\r\n            styles={styles}\r\n            startFromMonday={startFromMonday}\r\n            currentMonth={currentMonth}\r\n            currentYear={currentYear}\r\n            weekdays={weekdays}\r\n            textStyle={textStyle}\r\n            dayLabelsWrapper={dayLabelsWrapper}\r\n            customDayHeaderStyles={customDayHeaderStyles}\r\n          />\r\n          { scrollable ?\r\n            <Scroller\r\n              ref={scroller => this.scroller = scroller}\r\n              data={monthsList}\r\n              renderMonth={this.renderMonth}\r\n              renderMonthParams={renderMonthParams}\r\n              maxSimultaneousMonths={this.numMonthsScroll}\r\n              initialRenderIndex={initialScrollerIndex}\r\n              minDate={minDate}\r\n              maxDate={maxDate}\r\n              restrictMonthNavigation={restrictMonthNavigation}\r\n              updateMonthYear={this.updateMonthYear}\r\n              onMonthChange={onMonthChange}\r\n              horizontal={horizontal}\r\n            />\r\n            :\r\n            this.renderMonth(renderMonthParams)\r\n          }\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return content;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}