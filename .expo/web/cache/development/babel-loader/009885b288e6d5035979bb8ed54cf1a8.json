{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport EntypoGlyphMap from \"@expo/vector-icons/glyphmaps/Entypo.json\";\nimport EvilIconsGlyphMap from \"@expo/vector-icons/glyphmaps/EvilIcons.json\";\nimport FeatherGlyphMap from \"@expo/vector-icons/glyphmaps/Feather.json\";\nimport FontAwesomeGlyphMap from \"@expo/vector-icons/glyphmaps/FontAwesome.json\";\nimport FoundationGlyphMap from \"@expo/vector-icons/glyphmaps/Foundation.json\";\nimport IoniconsGlyphMap from \"@expo/vector-icons/glyphmaps/Ionicons.json\";\nimport MaterialCommunityIconsGlyphMap from \"@expo/vector-icons/glyphmaps/MaterialCommunityIcons.json\";\nimport MaterialIconsGlyphMap from \"@expo/vector-icons/glyphmaps/MaterialIcons.json\";\nimport OcticonsGlyphMap from \"@expo/vector-icons/glyphmaps/Octicons.json\";\nimport SimpleLineIconsGlyphMap from \"@expo/vector-icons/glyphmaps/SimpleLineIcons.json\";\nimport ZocialGlyphMap from \"@expo/vector-icons/glyphmaps/Zocial.json\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar RNImageHelper = function () {\n  function RNImageHelper() {\n    _classCallCheck(this, RNImageHelper);\n  }\n\n  _createClass(RNImageHelper, null, [{\n    key: \"Resolve\",\n    value: function Resolve(family, name) {\n      var glyph, fontFamily;\n\n      switch (family) {\n        case \"Entypo\":\n          glyph = EntypoGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          fontFamily = \"Entypo\";\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"EvilIcons\":\n          glyph = EvilIconsGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          fontFamily = \"EvilIcons\";\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"Feather\":\n          glyph = FeatherGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          fontFamily = \"Feather\";\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"FontAwesome\":\n          glyph = FontAwesomeGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          fontFamily = \"FontAwesome\";\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"Foundation\":\n          glyph = FoundationGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          if (Platform.OS === \"ios\") {\n            fontFamily = \"fontcustom\";\n          } else {\n            fontFamily = \"Foundation\";\n          }\n\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"Ionicons\":\n          glyph = IoniconsGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          fontFamily = \"Ionicons\";\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"MaterialCommunityIcons\":\n          glyph = MaterialCommunityIconsGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          if (Platform.OS === \"ios\") {\n            fontFamily = \"Material Design Icons\";\n          } else {\n            fontFamily = \"MaterialCommunityIcons\";\n          }\n\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"MaterialIcons\":\n          glyph = MaterialIconsGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          if (Platform.OS === \"ios\") {\n            fontFamily = \"Material Icons\";\n          } else {\n            fontFamily = \"MaterialIcons\";\n          }\n\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"Octicons\":\n          glyph = OcticonsGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          fontFamily = \"Octicons\";\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"SimpleLineIcons\":\n          glyph = SimpleLineIconsGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          if (Platform.OS === 'ios') {\n            fontFamily = \"simple-line-icons\";\n          } else {\n            fontFamily = \"SimpleLineIcons\";\n          }\n\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n\n        case \"Zocial\":\n          glyph = ZocialGlyphMap[name];\n\n          if (typeof glyph === \"number\") {\n            glyph = String.fromCharCode(glyph);\n          }\n\n          if (Platform.OS === \"ios\") {\n            fontFamily = \"zocial\";\n          } else {\n            fontFamily = \"Zocial\";\n          }\n\n          return {\n            glyph: glyph,\n            family: fontFamily\n          };\n      }\n    }\n  }]);\n\n  return RNImageHelper;\n}();\n\nexport default RNImageHelper;","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-image-helper/RNImageHelper.js"],"names":["EntypoGlyphMap","EvilIconsGlyphMap","FeatherGlyphMap","FontAwesomeGlyphMap","FoundationGlyphMap","IoniconsGlyphMap","MaterialCommunityIconsGlyphMap","MaterialIconsGlyphMap","OcticonsGlyphMap","SimpleLineIconsGlyphMap","ZocialGlyphMap","RNImageHelper","family","name","glyph","fontFamily","String","fromCharCode","Platform","OS"],"mappings":";;AAAA,OAAOA,cAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,eAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,8BAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,cAAP;;;IAIMC,a;;;;;;;4BACaC,M,EAAQC,I,EAAM;AACzB,UAAIC,KAAJ,EAAWC,UAAX;;AAEA,cAAQH,MAAR;AACI,aAAK,QAAL;AACIE,UAAAA,KAAK,GAAGd,cAAc,CAACa,IAAD,CAAtB;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AACDC,UAAAA,UAAU,GAAG,QAAb;AAEA,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,WAAL;AACID,UAAAA,KAAK,GAAGb,iBAAiB,CAACY,IAAD,CAAzB;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AACDC,UAAAA,UAAU,GAAG,WAAb;AAEA,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,SAAL;AACID,UAAAA,KAAK,GAAGZ,eAAe,CAACW,IAAD,CAAvB;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AACDC,UAAAA,UAAU,GAAG,SAAb;AAEA,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,aAAL;AACID,UAAAA,KAAK,GAAGX,mBAAmB,CAACU,IAAD,CAA3B;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AACDC,UAAAA,UAAU,GAAG,aAAb;AAEA,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,YAAL;AACID,UAAAA,KAAK,GAAGV,kBAAkB,CAACS,IAAD,CAA1B;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AAED,cAAII,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBJ,YAAAA,UAAU,GAAG,YAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAG,YAAb;AACH;;AAED,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,UAAL;AACID,UAAAA,KAAK,GAAGT,gBAAgB,CAACQ,IAAD,CAAxB;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AACDC,UAAAA,UAAU,GAAG,UAAb;AAEA,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,wBAAL;AACID,UAAAA,KAAK,GAAGR,8BAA8B,CAACO,IAAD,CAAtC;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AAED,cAAII,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBJ,YAAAA,UAAU,GAAG,uBAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAG,wBAAb;AACH;;AAED,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,eAAL;AACID,UAAAA,KAAK,GAAGP,qBAAqB,CAACM,IAAD,CAA7B;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AAED,cAAII,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBJ,YAAAA,UAAU,GAAG,gBAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAG,eAAb;AACH;;AAED,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,UAAL;AACID,UAAAA,KAAK,GAAGN,gBAAgB,CAACK,IAAD,CAAxB;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AACDC,UAAAA,UAAU,GAAG,UAAb;AAEA,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,iBAAL;AACID,UAAAA,KAAK,GAAGL,uBAAuB,CAACI,IAAD,CAA/B;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AAED,cAAII,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBJ,YAAAA,UAAU,GAAG,mBAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAG,iBAAb;AACH;;AAED,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;;AACJ,aAAK,QAAL;AACID,UAAAA,KAAK,GAAGJ,cAAc,CAACG,IAAD,CAAtB;;AACA,cAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,YAAAA,KAAK,GAAGE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAR;AACH;;AAED,cAAII,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvBJ,YAAAA,UAAU,GAAG,QAAb;AACH,WAFD,MAEO;AACHA,YAAAA,UAAU,GAAG,QAAb;AACH;;AAED,iBAAO;AAAED,YAAAA,KAAK,EAAEA,KAAT;AAAgBF,YAAAA,MAAM,EAAEG;AAAxB,WAAP;AAjHR;AAmHH;;;;;;AAGL,eAAeJ,aAAf","sourcesContent":["import EntypoGlyphMap from \"react-native-vector-icons/glyphmaps/Entypo.json\";\nimport EvilIconsGlyphMap from \"react-native-vector-icons/glyphmaps/EvilIcons.json\";\nimport FeatherGlyphMap from \"react-native-vector-icons/glyphmaps/Feather.json\";\nimport FontAwesomeGlyphMap from \"react-native-vector-icons/glyphmaps/FontAwesome.json\";\nimport FoundationGlyphMap from \"react-native-vector-icons/glyphmaps/Foundation.json\";\nimport IoniconsGlyphMap from \"react-native-vector-icons/glyphmaps/Ionicons.json\";\nimport MaterialCommunityIconsGlyphMap from \"react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json\";\nimport MaterialIconsGlyphMap from \"react-native-vector-icons/glyphmaps/MaterialIcons.json\";\nimport OcticonsGlyphMap from \"react-native-vector-icons/glyphmaps/Octicons.json\";\nimport SimpleLineIconsGlyphMap from \"react-native-vector-icons/glyphmaps/SimpleLineIcons.json\";\nimport ZocialGlyphMap from \"react-native-vector-icons/glyphmaps/Zocial.json\";\n\nimport { Platform } from \"react-native\";\n\nclass RNImageHelper {\n    static Resolve(family, name) {\n        let glyph, fontFamily\n\n        switch (family) {\n            case \"Entypo\":\n                glyph = EntypoGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n                fontFamily = \"Entypo\"\n\n                return { glyph: glyph, family: fontFamily };\n            case \"EvilIcons\":\n                glyph = EvilIconsGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n                fontFamily = \"EvilIcons\"\n\n                return { glyph: glyph, family: fontFamily };\n            case \"Feather\":\n                glyph = FeatherGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n                fontFamily = \"Feather\"\n\n                return { glyph: glyph, family: fontFamily };\n            case \"FontAwesome\":\n                glyph = FontAwesomeGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n                fontFamily = \"FontAwesome\";\n\n                return { glyph: glyph, family: fontFamily };\n            case \"Foundation\":\n                glyph = FoundationGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n\n                if (Platform.OS === \"ios\") {\n                    fontFamily = \"fontcustom\"\n                } else {\n                    fontFamily = \"Foundation\";\n                }\n\n                return { glyph: glyph, family: fontFamily };\n            case \"Ionicons\":\n                glyph = IoniconsGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n                fontFamily = \"Ionicons\"\n\n                return { glyph: glyph, family: fontFamily };\n            case \"MaterialCommunityIcons\":\n                glyph = MaterialCommunityIconsGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n\n                if (Platform.OS === \"ios\") {\n                    fontFamily = \"Material Design Icons\"\n                } else {\n                    fontFamily = \"MaterialCommunityIcons\";\n                }\n\n                return { glyph: glyph, family: fontFamily };\n            case \"MaterialIcons\":\n                glyph = MaterialIconsGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n\n                if (Platform.OS === \"ios\") {\n                    fontFamily = \"Material Icons\"\n                } else {\n                    fontFamily = \"MaterialIcons\";\n                }\n\n                return { glyph: glyph, family: fontFamily };\n            case \"Octicons\":\n                glyph = OcticonsGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n                fontFamily = \"Octicons\";\n\n                return { glyph: glyph, family: fontFamily };\n            case \"SimpleLineIcons\":\n                glyph = SimpleLineIconsGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n\n                if (Platform.OS === 'ios') {\n                    fontFamily = \"simple-line-icons\";\n                } else {\n                    fontFamily = \"SimpleLineIcons\"\n                }\n\n                return { glyph: glyph, family: fontFamily };\n            case \"Zocial\":\n                glyph = ZocialGlyphMap[name];\n                if (typeof glyph === \"number\") {\n                    glyph = String.fromCharCode(glyph);\n                }\n\n                if (Platform.OS === \"ios\") {\n                    fontFamily = \"zocial\";\n                } else {\n                    fontFamily = \"Zocial\";\n                }\n\n                return { glyph: glyph, family: fontFamily };\n        }\n    }\n}\n\nexport default RNImageHelper;"]},"metadata":{},"sourceType":"module"}