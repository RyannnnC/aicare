{"ast":null,"code":"var _jsxFileName = \"F:\\\\Github\\\\aicare\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\Year.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nexport default function Year(props) {\n  var year = props.year,\n      currentMonth = props.currentMonth,\n      currentYear = props.currentYear,\n      styles = props.styles,\n      onSelectYear = props.onSelectYear,\n      textStyle = props.textStyle,\n      minDate = props.minDate,\n      maxDate = props.maxDate;\n  var yearOutOfRange;\n  var yearIsBeforeMin = false;\n  var yearIsAfterMax = false;\n  var yearIsDisabled = false;\n\n  if (maxDate) {\n    yearIsAfterMax = year > maxDate.year();\n  }\n\n  if (minDate) {\n    yearIsBeforeMin = year < minDate.year();\n  }\n\n  yearOutOfRange = yearIsAfterMax || yearIsBeforeMin || yearIsDisabled;\n\n  var onSelect = function onSelect() {\n    var month = currentMonth;\n    var currentMonthYear = moment({\n      year: currentYear,\n      month: month\n    });\n\n    if (maxDate && currentMonthYear.isAfter(maxDate, 'month')) {\n      month = maxDate.month();\n    }\n\n    if (minDate && currentMonthYear.isBefore(minDate, 'month')) {\n      month = minDate.month();\n    }\n\n    onSelectYear({\n      month: month,\n      year: year\n    });\n  };\n\n  return React.createElement(View, {\n    style: [styles.yearContainer],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, !yearOutOfRange ? React.createElement(TouchableOpacity, {\n    onPress: onSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: [styles.yearText, textStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, year)) : React.createElement(Text, {\n    style: [textStyle, styles.disabledText],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, year));\n}\nYear.propTypes = {\n  styles: PropTypes.shape({}),\n  year: PropTypes.number,\n  onSelectYear: PropTypes.func\n};","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-calendar-picker/CalendarPicker/Year.js"],"names":["React","PropTypes","moment","Year","props","year","currentMonth","currentYear","styles","onSelectYear","textStyle","minDate","maxDate","yearOutOfRange","yearIsBeforeMin","yearIsAfterMax","yearIsDisabled","onSelect","month","currentMonthYear","isAfter","isBefore","yearContainer","yearText","disabledText","propTypes","shape","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAMA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA,MAEhCC,IAFgC,GAU9BD,KAV8B,CAEhCC,IAFgC;AAAA,MAGhCC,YAHgC,GAU9BF,KAV8B,CAGhCE,YAHgC;AAAA,MAIhCC,WAJgC,GAU9BH,KAV8B,CAIhCG,WAJgC;AAAA,MAKhCC,MALgC,GAU9BJ,KAV8B,CAKhCI,MALgC;AAAA,MAMhCC,YANgC,GAU9BL,KAV8B,CAMhCK,YANgC;AAAA,MAOhCC,SAPgC,GAU9BN,KAV8B,CAOhCM,SAPgC;AAAA,MAQhCC,OARgC,GAU9BP,KAV8B,CAQhCO,OARgC;AAAA,MAShCC,OATgC,GAU9BR,KAV8B,CAShCQ,OATgC;AAYlC,MAAIC,cAAJ;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,cAAc,GAAG,KAArB;;AAGA,MAAIJ,OAAJ,EAAa;AACXG,IAAAA,cAAc,GAAGV,IAAI,GAAGO,OAAO,CAACP,IAAR,EAAxB;AACD;;AACD,MAAIM,OAAJ,EAAa;AACXG,IAAAA,eAAe,GAAGT,IAAI,GAAGM,OAAO,CAACN,IAAR,EAAzB;AACD;;AAIDQ,EAAAA,cAAc,GAAGE,cAAc,IAAID,eAAlB,IAAqCE,cAAtD;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAErB,QAAIC,KAAK,GAAGZ,YAAZ;AACA,QAAIa,gBAAgB,GAAGjB,MAAM,CAAC;AAACG,MAAAA,IAAI,EAAEE,WAAP;AAAoBW,MAAAA,KAAK,EAALA;AAApB,KAAD,CAA7B;;AACA,QAAIN,OAAO,IAAIO,gBAAgB,CAACC,OAAjB,CAAyBR,OAAzB,EAAkC,OAAlC,CAAf,EAA2D;AACzDM,MAAAA,KAAK,GAAGN,OAAO,CAACM,KAAR,EAAR;AACD;;AACD,QAAIP,OAAO,IAAIQ,gBAAgB,CAACE,QAAjB,CAA0BV,OAA1B,EAAmC,OAAnC,CAAf,EAA4D;AAC1DO,MAAAA,KAAK,GAAGP,OAAO,CAACO,KAAR,EAAR;AACD;;AACDT,IAAAA,YAAY,CAAC;AAACS,MAAAA,KAAK,EAALA,KAAD;AAAQb,MAAAA,IAAI,EAAJA;AAAR,KAAD,CAAZ;AACD,GAXD;;AAaA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACG,MAAM,CAACc,aAAR,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,CAACT,cAAD,GACA,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAEI,QADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACT,MAAM,CAACe,QAAR,EAAkBb,SAAlB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIL,IADJ,CAFF,CADA,GAQA,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACK,SAAD,EAAYF,MAAM,CAACgB,YAAnB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACInB,IADJ,CATJ,CADF;AAgBD;AAEDF,IAAI,CAACsB,SAAL,GAAiB;AACfjB,EAAAA,MAAM,EAAEP,SAAS,CAACyB,KAAV,CAAgB,EAAhB,CADO;AAEfrB,EAAAA,IAAI,EAAEJ,SAAS,CAAC0B,MAFD;AAGflB,EAAAA,YAAY,EAAER,SAAS,CAAC2B;AAHT,CAAjB","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\nexport default function Year(props) {\r\n  const {\r\n    year,\r\n    currentMonth,\r\n    currentYear,\r\n    styles,\r\n    onSelectYear,\r\n    textStyle,\r\n    minDate,\r\n    maxDate,\r\n  } = props;\r\n\r\n  let yearOutOfRange;\r\n  let yearIsBeforeMin = false;\r\n  let yearIsAfterMax = false;\r\n  let yearIsDisabled = false;\r\n\r\n  // Check whether year is outside of min/max range.\r\n  if (maxDate) {\r\n    yearIsAfterMax = year > maxDate.year();\r\n  }\r\n  if (minDate) {\r\n    yearIsBeforeMin = year < minDate.year();\r\n  }\r\n\r\n  // ToDo: disabledYears props to disable years separate from disabledDates\r\n\r\n  yearOutOfRange = yearIsAfterMax || yearIsBeforeMin || yearIsDisabled;\r\n\r\n  const onSelect = () => {\r\n    // Guard against navigating to months beyond min/max dates.\r\n    let month = currentMonth;\r\n    let currentMonthYear = moment({year: currentYear, month});\r\n    if (maxDate && currentMonthYear.isAfter(maxDate, 'month')) {\r\n      month = maxDate.month();\r\n    }\r\n    if (minDate && currentMonthYear.isBefore(minDate, 'month')) {\r\n      month = minDate.month();\r\n    }\r\n    onSelectYear({month, year});\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.yearContainer]}>\r\n      { !yearOutOfRange ?\r\n        <TouchableOpacity\r\n          onPress={onSelect}>\r\n          <Text style={[styles.yearText, textStyle]}>\r\n            { year }\r\n          </Text>\r\n        </TouchableOpacity>\r\n        :\r\n        <Text style={[textStyle, styles.disabledText]}>\r\n          { year }\r\n        </Text>\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nYear.propTypes = {\r\n  styles: PropTypes.shape({}),\r\n  year: PropTypes.number,\r\n  onSelectYear: PropTypes.func,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}