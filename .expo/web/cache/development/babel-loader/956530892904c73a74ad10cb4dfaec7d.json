{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\Github\\\\aicare\\\\node_modules\\\\react-native-tab-navigator\\\\TabNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Set } from 'immutable';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Badge from \"./Badge\";\nimport Layout from \"./Layout\";\nimport StaticContainer from \"./StaticContainer\";\nimport Tab from \"./Tab\";\nimport TabBar from \"./TabBar\";\nimport TabNavigatorItem from \"./TabNavigatorItem\";\nimport ViewPropTypes from \"./config/ViewPropTypes\";\n\nvar TabNavigator = function (_React$Component) {\n  _inherits(TabNavigator, _React$Component);\n\n  var _super = _createSuper(TabNavigator);\n\n  function TabNavigator(props, context) {\n    var _this;\n\n    _classCallCheck(this, TabNavigator);\n\n    _this = _super.call(this, props, context);\n    _this.state = {\n      renderedSceneKeys: _this._updateRenderedSceneKeys(props.children)\n    };\n    _this._renderTab = _this._renderTab.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TabNavigator, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var renderedSceneKeys = this.state.renderedSceneKeys;\n      this.setState({\n        renderedSceneKeys: this._updateRenderedSceneKeys(nextProps.children, renderedSceneKeys)\n      });\n    }\n  }, {\n    key: \"_getSceneKey\",\n    value: function _getSceneKey(item, index) {\n      return \"scene-\" + (item.key !== null ? item.key : index);\n    }\n  }, {\n    key: \"_updateRenderedSceneKeys\",\n    value: function _updateRenderedSceneKeys(children) {\n      var _this2 = this;\n\n      var oldSceneKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Set();\n      var newSceneKeys = Set().asMutable();\n      React.Children.forEach(children, function (item, index) {\n        if (item === null) {\n          return;\n        }\n\n        var key = _this2._getSceneKey(item, index);\n\n        if (oldSceneKeys.has(key) || item.props.selected) {\n          newSceneKeys.add(key);\n        }\n      });\n      return newSceneKeys.asImmutable();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          children = _this$props.children,\n          tabBarStyle = _this$props.tabBarStyle,\n          tabBarShadowStyle = _this$props.tabBarShadowStyle,\n          sceneStyle = _this$props.sceneStyle,\n          props = _objectWithoutProperties(_this$props, [\"style\", \"children\", \"tabBarStyle\", \"tabBarShadowStyle\", \"sceneStyle\"]);\n\n      var scenes = [];\n      React.Children.forEach(children, function (item, index) {\n        if (item === null) {\n          return;\n        }\n\n        var sceneKey = _this3._getSceneKey(item, index);\n\n        if (!_this3.state.renderedSceneKeys.has(sceneKey)) {\n          return;\n        }\n\n        var selected = item.props.selected;\n        var scene = React.createElement(SceneContainer, {\n          key: sceneKey,\n          selected: selected,\n          style: sceneStyle,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 9\n          }\n        }, item);\n        scenes.push(scene);\n      });\n      return React.createElement(View, _extends({}, props, {\n        style: [styles.container, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }\n      }), scenes, React.createElement(TabBar, {\n        style: tabBarStyle,\n        shadowStyle: tabBarShadowStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, React.Children.map(children, this._renderTab)));\n    }\n  }, {\n    key: \"_renderTab\",\n    value: function _renderTab(item) {\n      var icon;\n\n      if (item === null) {\n        return;\n      }\n\n      if (item.props.selected) {\n        if (item.props.renderSelectedIcon) {\n          icon = item.props.renderSelectedIcon();\n        } else if (item.props.renderIcon) {\n          var defaultIcon = item.props.renderIcon();\n          icon = React.cloneElement(defaultIcon, {\n            style: [defaultIcon.props.style, styles.defaultSelectedIcon]\n          });\n        }\n      } else if (item.props.renderIcon) {\n        icon = item.props.renderIcon();\n      }\n\n      var badge;\n\n      if (item.props.renderBadge) {\n        badge = item.props.renderBadge();\n      } else if (item.props.badgeText) {\n        badge = React.createElement(Badge, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }\n        }, item.props.badgeText);\n      }\n\n      return React.createElement(Tab, {\n        testID: item.props.testID,\n        title: item.props.title,\n        allowFontScaling: item.props.allowFontScaling,\n        titleStyle: [item.props.titleStyle, item.props.selected ? [styles.defaultSelectedTitle, item.props.selectedTitleStyle] : null],\n        badge: badge,\n        onPress: item.props.onPress,\n        hidesTabTouch: this.props.hidesTabTouch,\n        style: item.props.tabStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, icon);\n    }\n  }]);\n\n  return TabNavigator;\n}(React.Component);\n\nTabNavigator.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  sceneStyle: ViewPropTypes.style,\n  tabBarStyle: TabBar.propTypes.style,\n  tabBarShadowStyle: TabBar.propTypes.shadowStyle,\n  hidesTabTouch: PropTypes.bool\n});\nexport { TabNavigator as default };\n\nvar SceneContainer = function (_React$Component2) {\n  _inherits(SceneContainer, _React$Component2);\n\n  var _super2 = _createSuper(SceneContainer);\n\n  function SceneContainer() {\n    _classCallCheck(this, SceneContainer);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SceneContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          selected = _this$props2.selected,\n          props = _objectWithoutProperties(_this$props2, [\"selected\"]);\n\n      return React.createElement(View, _extends({}, props, {\n        pointerEvents: selected ? 'auto' : 'none',\n        removeClippedSubviews: !selected,\n        style: [styles.sceneContainer, selected ? null : styles.hiddenSceneContainer, props.style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }\n      }), React.createElement(StaticContainer, {\n        shouldUpdate: selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }, this.props.children));\n    }\n  }]);\n\n  return SceneContainer;\n}(React.Component);\n\nSceneContainer.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  selected: PropTypes.bool\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  sceneContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    paddingBottom: Layout.tabBarHeight\n  },\n  hiddenSceneContainer: {\n    overflow: 'hidden',\n    opacity: 0\n  },\n  defaultSelectedTitle: {\n    color: 'rgb(0, 122, 255)'\n  },\n  defaultSelectedIcon: {\n    tintColor: 'rgb(0, 122, 255)'\n  }\n});\nTabNavigator.Item = TabNavigatorItem;","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-tab-navigator/TabNavigator.js"],"names":["Set","React","PropTypes","Badge","Layout","StaticContainer","Tab","TabBar","TabNavigatorItem","ViewPropTypes","TabNavigator","props","context","state","renderedSceneKeys","_updateRenderedSceneKeys","children","_renderTab","bind","nextProps","setState","item","index","key","oldSceneKeys","newSceneKeys","asMutable","Children","forEach","_getSceneKey","has","selected","add","asImmutable","style","tabBarStyle","tabBarShadowStyle","sceneStyle","scenes","sceneKey","scene","push","styles","container","map","icon","renderSelectedIcon","renderIcon","defaultIcon","cloneElement","defaultSelectedIcon","badge","renderBadge","badgeText","testID","title","allowFontScaling","titleStyle","defaultSelectedTitle","selectedTitleStyle","onPress","hidesTabTouch","tabStyle","Component","propTypes","shadowStyle","bool","SceneContainer","sceneContainer","hiddenSceneContainer","StyleSheet","create","flex","position","top","left","right","bottom","paddingBottom","tabBarHeight","overflow","opacity","color","tintColor","Item"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { Set } from 'immutable';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport Badge from './Badge';\nimport Layout from './Layout';\nimport StaticContainer from './StaticContainer';\nimport Tab from './Tab';\nimport TabBar from './TabBar';\nimport TabNavigatorItem from './TabNavigatorItem';\nimport ViewPropTypes from './config/ViewPropTypes';\n\nexport default class TabNavigator extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    sceneStyle: ViewPropTypes.style,\n    tabBarStyle: TabBar.propTypes.style,\n    tabBarShadowStyle: TabBar.propTypes.shadowStyle,\n    hidesTabTouch: PropTypes.bool\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      renderedSceneKeys: this._updateRenderedSceneKeys(props.children),\n    };\n\n    this._renderTab = this._renderTab.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { renderedSceneKeys } = this.state;\n    this.setState({\n      renderedSceneKeys: this._updateRenderedSceneKeys(\n        nextProps.children,\n        renderedSceneKeys,\n      ),\n    });\n  }\n\n  _getSceneKey(item, index): string {\n    return `scene-${(item.key !== null) ? item.key : index}`;\n  }\n\n  _updateRenderedSceneKeys(children, oldSceneKeys = Set()): Set {\n    let newSceneKeys = Set().asMutable();\n    React.Children.forEach(children, (item, index) => {\n      if (item === null) {\n        return;\n      }\n      let key = this._getSceneKey(item, index);\n      if (oldSceneKeys.has(key) || item.props.selected) {\n        newSceneKeys.add(key);\n      }\n    });\n    return newSceneKeys.asImmutable();\n  }\n\n  render() {\n    let { style, children, tabBarStyle, tabBarShadowStyle, sceneStyle, ...props } = this.props;\n    let scenes = [];\n\n    React.Children.forEach(children, (item, index) => {\n      if (item === null) {\n        return;\n      }\n      let sceneKey = this._getSceneKey(item, index);\n      if (!this.state.renderedSceneKeys.has(sceneKey)) {\n        return;\n      }\n\n      let { selected } = item.props;\n      let scene =\n        <SceneContainer key={sceneKey} selected={selected} style={sceneStyle}>\n          {item}\n        </SceneContainer>;\n\n      scenes.push(scene);\n    });\n\n    return (\n      <View {...props} style={[styles.container, style]}>\n        {scenes}\n        <TabBar style={tabBarStyle} shadowStyle={tabBarShadowStyle}>\n          {React.Children.map(children, this._renderTab)}\n        </TabBar>\n      </View>\n    );\n  }\n\n  _renderTab(item) {\n    let icon;\n    if (item === null) {\n      return;\n    }\n    if (item.props.selected) {\n      if (item.props.renderSelectedIcon) {\n        icon = item.props.renderSelectedIcon();\n      } else if (item.props.renderIcon) {\n        let defaultIcon = item.props.renderIcon();\n        icon = React.cloneElement(defaultIcon, {\n          style: [defaultIcon.props.style, styles.defaultSelectedIcon],\n        });\n      }\n    } else if (item.props.renderIcon) {\n      icon = item.props.renderIcon();\n    }\n\n    let badge;\n    if (item.props.renderBadge) {\n      badge = item.props.renderBadge();\n    } else if (item.props.badgeText) {\n      badge = <Badge>{item.props.badgeText}</Badge>;\n    }\n\n    return (\n      <Tab\n        testID={item.props.testID}\n        title={item.props.title}\n        allowFontScaling={item.props.allowFontScaling}\n        titleStyle={[\n          item.props.titleStyle,\n          item.props.selected ? [\n            styles.defaultSelectedTitle,\n            item.props.selectedTitleStyle,\n          ] : null,\n        ]}\n        badge={badge}\n        onPress={item.props.onPress}\n        hidesTabTouch={this.props.hidesTabTouch}\n        style={item.props.tabStyle}>\n        {icon}\n      </Tab>\n    );\n  }\n}\n\nclass SceneContainer extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    selected: PropTypes.bool,\n  };\n\n  render() {\n    let { selected, ...props } = this.props;\n    return (\n      <View\n        {...props}\n        pointerEvents={selected ? 'auto' : 'none'}\n        removeClippedSubviews={!selected}\n        style={[\n          styles.sceneContainer,\n          selected ? null : styles.hiddenSceneContainer,\n          props.style,\n        ]}>\n        <StaticContainer shouldUpdate={selected}>\n          {this.props.children}\n        </StaticContainer>\n      </View>\n    );\n  }\n}\n\nlet styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  sceneContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    paddingBottom: Layout.tabBarHeight,\n  },\n  hiddenSceneContainer: {\n    overflow: 'hidden',\n    opacity: 0,\n  },\n  defaultSelectedTitle: {\n    color: 'rgb(0, 122, 255)',\n  },\n  defaultSelectedIcon: {\n    tintColor: 'rgb(0, 122, 255)',\n  },\n});\n\nTabNavigator.Item = TabNavigatorItem;\n"]},"metadata":{},"sourceType":"module"}