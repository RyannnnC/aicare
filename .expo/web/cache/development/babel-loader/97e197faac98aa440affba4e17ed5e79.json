{"ast":null,"code":"var content = \"\\n    var wrapper = document.getElementById(\\\"signature-pad\\\"),\\n        clearButton = wrapper.querySelector(\\\"[data-action=clear]\\\"),\\n        saveButton = wrapper.querySelector(\\\"[data-action=save]\\\"),\\n        canvas = wrapper.querySelector(\\\"canvas\\\"),\\n        signaturePad;\\n    \\n    // Adjust canvas coordinate space taking into account pixel ratio,\\n    // to make it look crisp on mobile devices.\\n    // This also causes canvas to be cleared.\\n    function resizeCanvas() {\\n        // When zoomed out to less than 100%, for some very strange reason,\\n        // some browsers report devicePixelRatio as less than 1\\n        // and only part of the canvas is cleared then.\\n        var context = canvas.getContext(\\\"2d\\\"); //context.getImageData(0,0,canvas.width,canvas.height)\\n        var imgData = signaturePad ? signaturePad.toData() : null;\\n        var ratio =  Math.max(window.devicePixelRatio || 1, 1);\\n        canvas.width = canvas.offsetWidth * ratio;\\n        canvas.height = canvas.offsetHeight * ratio;\\n        context.scale(ratio, ratio);\\n        // context.putImageData(imgData,0,0);\\n        imgData && signaturePad.fromData(imgData);\\n    }\\n    \\n    window.onresize = resizeCanvas;\\n    resizeCanvas();\\n    \\n    signaturePad = new SignaturePad(canvas, {\\n        onBegin: () => window.ReactNativeWebView.postMessage(\\\"BEGIN\\\"),\\n        onEnd: () => window.ReactNativeWebView.postMessage(\\\"END\\\"),\\n        penColor: '<%penColor%>',\\n        backgroundColor: '<%backgroundColor%>',\\n        dotSize: <%dotSize%>,\\n        minWidth: <%minWidth%>,\\n    });\\n\\n    function clearSignature (event) {\\n        signaturePad.clear();\\n        window.ReactNativeWebView.postMessage(\\\"CLEAR\\\");\\n    }\\n\\n    clearButton.addEventListener(\\\"click\\\", clearSignature );\\n\\n    var autoClear = <%autoClear%>;\\n    \\n    var trimWhitespace = <%trimWhitespace%>;\\n\\n    var dataURL = '<%dataURL%>';\\n\\n    if (dataURL) {\\n        signaturePad.fromDataURL(dataURL);\\n    }\\n\\n    function cropWhitespace(url) {\\n\\n        var myImage = new Image();\\n        myImage.crossOrigin = \\\"Anonymous\\\";\\n        myImage.onload = function(){\\n            window.ReactNativeWebView.postMessage(removeImageBlanks(myImage)); //Will return cropped image data\\n        }\\n        myImage.src = url;\\n\\n        //-----------------------------------------//\\n        function removeImageBlanks(imageObject) {\\n            imgWidth = imageObject.width;\\n            imgHeight = imageObject.height;\\n            var canvas = document.createElement('canvas');\\n            canvas.setAttribute(\\\"width\\\", imgWidth);\\n            canvas.setAttribute(\\\"height\\\", imgHeight);\\n            var context = canvas.getContext('2d');\\n            context.drawImage(imageObject, 0, 0);\\n\\n            var imageData = context.getImageData(0, 0, imgWidth, imgHeight),\\n                data = imageData.data,\\n                getRBG = function(x, y) {\\n                    var offset = imgWidth * y + x;\\n                    return {\\n                        red:     data[offset * 4],\\n                        green:   data[offset * 4 + 1],\\n                        blue:    data[offset * 4 + 2],\\n                        opacity: data[offset * 4 + 3]\\n                    };\\n                },\\n                isWhite = function (rgb) {\\n                    // many images contain noise, as the white is not a pure #fff white\\n                    return !rgb.opacity || (rgb.red > 200 && rgb.green > 200 && rgb.blue > 200);\\n                },\\n                        scanY = function (fromTop) {\\n                var offset = fromTop ? 1 : -1;\\n\\n                // loop through each row\\n                for(var y = fromTop ? 0 : imgHeight - 1; fromTop ? (y < imgHeight) : (y > -1); y += offset) {\\n\\n                    // loop through each column\\n                    for(var x = 0; x < imgWidth; x++) {\\n                        var rgb = getRBG(x, y);\\n                        if (!isWhite(rgb)) {\\n                            if (fromTop) {\\n                                return y;\\n                            } else {\\n                                return Math.min(y + 1, imgHeight);\\n                            }\\n                        }\\n                    }\\n                }\\n                return null; // all image is white\\n            },\\n            scanX = function (fromLeft) {\\n                var offset = fromLeft? 1 : -1;\\n\\n                // loop through each column\\n                for(var x = fromLeft ? 0 : imgWidth - 1; fromLeft ? (x < imgWidth) : (x > -1); x += offset) {\\n\\n                    // loop through each row\\n                    for(var y = 0; y < imgHeight; y++) {\\n                        var rgb = getRBG(x, y);\\n                        if (!isWhite(rgb)) {\\n                            if (fromLeft) {\\n                                return x;\\n                            } else {\\n                                return Math.min(x + 1, imgWidth);\\n                            }\\n                        }      \\n                    }\\n                }\\n                return null; // all image is white\\n            };\\n\\n            var cropTop = scanY(true),\\n                cropBottom = scanY(false),\\n                cropLeft = scanX(true),\\n                cropRight = scanX(false),\\n                cropWidth = cropRight - cropLeft,\\n                cropHeight = cropBottom - cropTop;\\n\\n            canvas.setAttribute(\\\"width\\\", cropWidth);\\n            canvas.setAttribute(\\\"height\\\", cropHeight);\\n            // finally crop the guy\\n            canvas.getContext(\\\"2d\\\").drawImage(imageObject,\\n                cropLeft, cropTop, cropWidth, cropHeight,\\n                0, 0, cropWidth, cropHeight);\\n\\n            return canvas.toDataURL('<%imageType%>');\\n        }\\n    }\\n\\n    function readSignature()  {\\n        if (signaturePad.isEmpty()) {\\n            window.ReactNativeWebView.postMessage(\\\"EMPTY\\\");\\n        } else {\\n            var url = signaturePad.toDataURL('<%imageType%>');\\n            trimWhitespace? cropWhitespace(url): window.ReactNativeWebView.postMessage(url);\\n            if (autoClear) {\\n                signaturePad.clear();\\n            }\\n        }\\n    }\\n\\n    saveButton.addEventListener(\\\"click\\\", readSignature);\\n\";\nexport default content;","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-signature-canvas/h5/js/app.js"],"names":["content"],"mappings":"AAAA,IAAMA,OAAO,orMAAb;AAiKA,eAAeA,OAAf","sourcesContent":["const content = `\n    var wrapper = document.getElementById(\"signature-pad\"),\n        clearButton = wrapper.querySelector(\"[data-action=clear]\"),\n        saveButton = wrapper.querySelector(\"[data-action=save]\"),\n        canvas = wrapper.querySelector(\"canvas\"),\n        signaturePad;\n    \n    // Adjust canvas coordinate space taking into account pixel ratio,\n    // to make it look crisp on mobile devices.\n    // This also causes canvas to be cleared.\n    function resizeCanvas() {\n        // When zoomed out to less than 100%, for some very strange reason,\n        // some browsers report devicePixelRatio as less than 1\n        // and only part of the canvas is cleared then.\n        var context = canvas.getContext(\"2d\"); //context.getImageData(0,0,canvas.width,canvas.height)\n        var imgData = signaturePad ? signaturePad.toData() : null;\n        var ratio =  Math.max(window.devicePixelRatio || 1, 1);\n        canvas.width = canvas.offsetWidth * ratio;\n        canvas.height = canvas.offsetHeight * ratio;\n        context.scale(ratio, ratio);\n        // context.putImageData(imgData,0,0);\n        imgData && signaturePad.fromData(imgData);\n    }\n    \n    window.onresize = resizeCanvas;\n    resizeCanvas();\n    \n    signaturePad = new SignaturePad(canvas, {\n        onBegin: () => window.ReactNativeWebView.postMessage(\"BEGIN\"),\n        onEnd: () => window.ReactNativeWebView.postMessage(\"END\"),\n        penColor: '<%penColor%>',\n        backgroundColor: '<%backgroundColor%>',\n        dotSize: <%dotSize%>,\n        minWidth: <%minWidth%>,\n    });\n\n    function clearSignature (event) {\n        signaturePad.clear();\n        window.ReactNativeWebView.postMessage(\"CLEAR\");\n    }\n\n    clearButton.addEventListener(\"click\", clearSignature );\n\n    var autoClear = <%autoClear%>;\n    \n    var trimWhitespace = <%trimWhitespace%>;\n\n    var dataURL = '<%dataURL%>';\n\n    if (dataURL) {\n        signaturePad.fromDataURL(dataURL);\n    }\n\n    function cropWhitespace(url) {\n\n        var myImage = new Image();\n        myImage.crossOrigin = \"Anonymous\";\n        myImage.onload = function(){\n            window.ReactNativeWebView.postMessage(removeImageBlanks(myImage)); //Will return cropped image data\n        }\n        myImage.src = url;\n\n        //-----------------------------------------//\n        function removeImageBlanks(imageObject) {\n            imgWidth = imageObject.width;\n            imgHeight = imageObject.height;\n            var canvas = document.createElement('canvas');\n            canvas.setAttribute(\"width\", imgWidth);\n            canvas.setAttribute(\"height\", imgHeight);\n            var context = canvas.getContext('2d');\n            context.drawImage(imageObject, 0, 0);\n\n            var imageData = context.getImageData(0, 0, imgWidth, imgHeight),\n                data = imageData.data,\n                getRBG = function(x, y) {\n                    var offset = imgWidth * y + x;\n                    return {\n                        red:     data[offset * 4],\n                        green:   data[offset * 4 + 1],\n                        blue:    data[offset * 4 + 2],\n                        opacity: data[offset * 4 + 3]\n                    };\n                },\n                isWhite = function (rgb) {\n                    // many images contain noise, as the white is not a pure #fff white\n                    return !rgb.opacity || (rgb.red > 200 && rgb.green > 200 && rgb.blue > 200);\n                },\n                        scanY = function (fromTop) {\n                var offset = fromTop ? 1 : -1;\n\n                // loop through each row\n                for(var y = fromTop ? 0 : imgHeight - 1; fromTop ? (y < imgHeight) : (y > -1); y += offset) {\n\n                    // loop through each column\n                    for(var x = 0; x < imgWidth; x++) {\n                        var rgb = getRBG(x, y);\n                        if (!isWhite(rgb)) {\n                            if (fromTop) {\n                                return y;\n                            } else {\n                                return Math.min(y + 1, imgHeight);\n                            }\n                        }\n                    }\n                }\n                return null; // all image is white\n            },\n            scanX = function (fromLeft) {\n                var offset = fromLeft? 1 : -1;\n\n                // loop through each column\n                for(var x = fromLeft ? 0 : imgWidth - 1; fromLeft ? (x < imgWidth) : (x > -1); x += offset) {\n\n                    // loop through each row\n                    for(var y = 0; y < imgHeight; y++) {\n                        var rgb = getRBG(x, y);\n                        if (!isWhite(rgb)) {\n                            if (fromLeft) {\n                                return x;\n                            } else {\n                                return Math.min(x + 1, imgWidth);\n                            }\n                        }      \n                    }\n                }\n                return null; // all image is white\n            };\n\n            var cropTop = scanY(true),\n                cropBottom = scanY(false),\n                cropLeft = scanX(true),\n                cropRight = scanX(false),\n                cropWidth = cropRight - cropLeft,\n                cropHeight = cropBottom - cropTop;\n\n            canvas.setAttribute(\"width\", cropWidth);\n            canvas.setAttribute(\"height\", cropHeight);\n            // finally crop the guy\n            canvas.getContext(\"2d\").drawImage(imageObject,\n                cropLeft, cropTop, cropWidth, cropHeight,\n                0, 0, cropWidth, cropHeight);\n\n            return canvas.toDataURL('<%imageType%>');\n        }\n    }\n\n    function readSignature()  {\n        if (signaturePad.isEmpty()) {\n            window.ReactNativeWebView.postMessage(\"EMPTY\");\n        } else {\n            var url = signaturePad.toDataURL('<%imageType%>');\n            trimWhitespace? cropWhitespace(url): window.ReactNativeWebView.postMessage(url);\n            if (autoClear) {\n                signaturePad.clear();\n            }\n        }\n    }\n\n    saveButton.addEventListener(\"click\", readSignature);\n`;\n\nexport default content;"]},"metadata":{},"sourceType":"module"}