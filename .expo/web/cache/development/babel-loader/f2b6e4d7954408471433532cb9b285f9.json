{"ast":null,"code":"var _jsxFileName = \"F:\\\\Github\\\\aicare\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\Month.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\nimport { Utils } from \"./Utils\";\nexport default function Month(props) {\n  var months = props.months,\n      month = props.currentMonth,\n      year = props.currentYear,\n      styles = props.styles,\n      onSelectMonth = props.onSelectMonth,\n      textStyle = props.textStyle,\n      minDate = props.minDate,\n      maxDate = props.maxDate;\n  var MONTHS = months || Utils.MONTHS;\n  var monthName = MONTHS[month];\n  var monthOutOfRange;\n  var monthIsBeforeMin = false;\n  var monthIsAfterMax = false;\n  var monthIsDisabled = false;\n\n  if (maxDate && maxDate.year() === year) {\n    monthIsAfterMax = month > maxDate.month();\n  }\n\n  if (minDate && minDate.year() === year) {\n    monthIsBeforeMin = month < minDate.month();\n  }\n\n  monthOutOfRange = monthIsAfterMax || monthIsBeforeMin || monthIsDisabled;\n\n  var onSelect = function onSelect() {\n    var _year = year;\n\n    if (minDate && year < minDate.year()) {\n      _year = minDate.year();\n    }\n\n    if (maxDate && year > maxDate.year()) {\n      _year = maxDate.year();\n    }\n\n    onSelectMonth({\n      month: month,\n      year: _year\n    });\n  };\n\n  return React.createElement(View, {\n    style: [styles.monthContainer],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, !monthOutOfRange ? React.createElement(TouchableOpacity, {\n    onPress: onSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: [styles.monthText, textStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, monthName)) : React.createElement(Text, {\n    style: [textStyle, styles.disabledText],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, monthName));\n}\nMonth.propTypes = {\n  styles: PropTypes.shape({}),\n  currentMonth: PropTypes.number,\n  currentYear: PropTypes.number,\n  onSelectMonth: PropTypes.func\n};","map":{"version":3,"sources":["F:/Github/aicare/node_modules/react-native-calendar-picker/CalendarPicker/Month.js"],"names":["React","PropTypes","Utils","Month","props","months","month","currentMonth","year","currentYear","styles","onSelectMonth","textStyle","minDate","maxDate","MONTHS","monthName","monthOutOfRange","monthIsBeforeMin","monthIsAfterMax","monthIsDisabled","onSelect","_year","monthContainer","monthText","disabledText","propTypes","shape","number","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport { Utils } from './Utils';\r\n\r\nexport default function Month(props) {\r\n  const {\r\n    months,\r\n    currentMonth: month,\r\n    currentYear: year,\r\n    styles,\r\n    onSelectMonth,\r\n    textStyle,\r\n    minDate,\r\n    maxDate,\r\n  } = props;\r\n\r\n  const MONTHS = months || Utils.MONTHS; // English Month Array\r\n  const monthName = MONTHS[month];\r\n\r\n  let monthOutOfRange;\r\n  let monthIsBeforeMin = false;\r\n  let monthIsAfterMax = false;\r\n  let monthIsDisabled = false;\r\n\r\n  // Check whether month is outside of min/max range.\r\n  if (maxDate && (maxDate.year() === year)) {\r\n    monthIsAfterMax = month > maxDate.month();\r\n  }\r\n  if (minDate && (minDate.year() === year)) {\r\n    monthIsBeforeMin = month < minDate.month();\r\n  }\r\n\r\n  // ToDo: disabledMonths props to disable months separate from disabledDates\r\n\r\n  monthOutOfRange = monthIsAfterMax || monthIsBeforeMin || monthIsDisabled;\r\n\r\n  const onSelect = () => {\r\n    let _year = year;\r\n    if (minDate && (year < minDate.year())) {\r\n      _year = minDate.year();\r\n    }\r\n    if (maxDate && (year > maxDate.year())) {\r\n      _year = maxDate.year();\r\n    }\r\n    onSelectMonth({month, year: _year});\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.monthContainer]}>\r\n      { !monthOutOfRange ?\r\n        <TouchableOpacity\r\n          onPress={onSelect}>\r\n          <Text style={[styles.monthText, textStyle]}>\r\n            { monthName }\r\n          </Text>\r\n        </TouchableOpacity>\r\n        :\r\n        <Text style={[textStyle, styles.disabledText]}>\r\n          { monthName }\r\n        </Text>\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nMonth.propTypes = {\r\n  styles: PropTypes.shape({}),\r\n  currentMonth: PropTypes.number,\r\n  currentYear: PropTypes.number,\r\n  onSelectMonth: PropTypes.func,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}